{
	// エディターで CodeLens を表示するかどうかを制御します。
	"diffEditor.codeLens": false,

	// 
	//  - smart: 既定の差分アルゴリズムを使用します。
	//  - experimental: 試験的な差分アルゴリズムを使用します。
	"diffEditor.diffAlgorithm": "smart",

	// 有効にすると、差分エディターは先頭または末尾の空白文字の変更を無視します。
	"diffEditor.ignoreTrimWhitespace": true,

	// 差分計算が取り消された後のタイムアウト (ミリ秒単位)。タイムアウトなしには 0 を使用します。
	"diffEditor.maxComputationTime": 5000,

	// 差分を計算する場合の最大ファイル サイズ (MB)。制限なしの場合は 0 を使用します。
	"diffEditor.maxFileSize": 50,

	// 差分エディターが追加/削除された変更に +/- インジケーターを示すかどうかを制御します。
	"diffEditor.renderIndicators": true,

	// 有効にすると、差分エディターでグリフ余白に、変更を元に戻すための矢印が表示されます。
	"diffEditor.renderMarginRevertIcon": true,

	// 差分エディターが差分を横に並べて表示するか、行内に表示するかを制御します。
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: 行を折り返しません。
	//  - on: 行をビューポートの幅で折り返します。
	//  - inherit: 行は、`editor.wordWrap` の設定に従って折り返されます。
	"diffEditor.wordWrap": "inherit",

	// コミット文字で候補を受け入れるかどうかを制御します。たとえば、JavaScript ではセミコロン (`;`) をコミット文字にして、候補を受け入れてその文字を入力することができます。
	"editor.acceptSuggestionOnCommitCharacter": true,

	// `Tab` キーに加えて `Enter` キーで候補を受け入れるかどうかを制御します。改行の挿入や候補の反映の間であいまいさを解消するのに役立ちます。
	//  - on
	//  - smart: テキストの変更を行うとき、`Enter` を使用する場合にのみ候補を受け付けます。
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// 一度にスクリーン リーダーによって読み上げることができるエディターの行数を制御します。スクリーン リーダーが検出されると、既定値が 500 に自動的に設定されます。警告: 既定値より大きい数値の場合は、パフォーマンスに影響があります。
	"editor.accessibilityPageSize": 10,

	// エディターをスクリーン リーダーに最適化されたモードで実行するかどうかを制御します。
	//  - auto: エディターはスクリーン リーダーがいつ接続されたかを検出するためにプラットフォーム API を使用します。
	//  - on: エディターは永続的にスクリーン リーダーでの使用向けに最適化されます。単語の折り返しは無効になります。
	//  - off: エディターはスクリーン リーダー向けに最適化されません。
	"editor.accessibilitySupport": "auto",

	// エディターで左角かっこを追加した後に自動的に右角かっこを挿入するかどうかを制御します。
	//  - always
	//  - languageDefined: 言語設定を使用して、いつかっこを自動クローズするか決定します。
	//  - beforeWhitespace: カーソルが空白文字の左にあるときだけ、かっこを自動クローズします。
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// 削除時にエディターで隣接する終わり引用符または括弧を削除するかどうかを制御します。
	//  - always
	//  - auto: 隣接する終わり引用符または括弧が自動的に挿入された場合にのみ、それらを削除します。
	//  - never
	"editor.autoClosingDelete": "auto",

	// エディターで終わり引用符または括弧を上書きするかどうかを制御します。
	//  - always
	//  - auto: 終わり引用符または括弧が自動的に挿入された場合にのみ、それらを上書きします。
	//  - never
	"editor.autoClosingOvertype": "auto",

	// ユーザーが開始引用符を追加した後、エディター自動的に引用符を閉じるかどうかを制御します。
	//  - always
	//  - languageDefined: 言語設定を使用して、いつ引用符を自動クローズするか決定します。
	//  - beforeWhitespace: カーソルが空白文字の左にあるときだけ、引用符を自動クローズします。
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// ユーザーが行を入力、貼り付け、移動、またはインデントするときに、エディターでインデントを自動的に調整するかどうかを制御します。
	//  - none: エディターはインデントを自動的に挿入しません。
	//  - keep: エディターは、現在の行のインデントを保持します。
	//  - brackets: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先します。
	//  - advanced: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先し、言語で定義された特別な onEnterRules を呼び出します。
	//  - full: エディターは、現在の行のインデントを保持し、言語が定義されたかっこを優先し、言語で定義された特別な onEnterRules を呼び出し、言語で定義された indentationRules を優先します。
	"editor.autoIndent": "full",

	// 引用符または角かっこを入力するときに、エディターが選択範囲を自動的に囲むかどうかを制御します。
	//  - languageDefined: 言語構成を使用して、選択範囲をいつ自動的に囲むかを判断します。
	//  - quotes: 角かっこではなく、引用符で囲みます。
	//  - brackets: 引用符ではなく、角かっこで囲みます。
	//  - never
	"editor.autoSurround": "languageDefined",

	// ブラケットのペアの色付けが有効かどうかを制御します。 `workbench.colorCustomizations` を使用して、ブラケットの強調表示の色をオーバーライドします。
	"editor.bracketPairColorization.enabled": true,

	// 括弧の各種別が、個別のカラー プールを保持するかどうかを制御します。
	"editor.bracketPairColorization.independentColorPoolPerBracketType": false,

	// 保存時に実行されるコードアクションの種類。
	"editor.codeActionsOnSave": {},

	// コード アクション メニューでのグループ ヘッダーの表示の有効/無効を切り替えます。
	"editor.codeActionWidget.showHeaders": true,

	// エディターで CodeLens を表示するかどうかを制御します。
	"editor.codeLens": true,

	// CodeLens のフォント ファミリを制御します。
	"editor.codeLensFontFamily": "",

	// CodeLens のフォント サイズをピクセル単位で制御します。0 に設定すると、`editor.fontSize` の 90% が使用されます。
	"editor.codeLensFontSize": 0,

	// エディターでインライン カラー デコレーターと色の選択を表示する必要があるかどうかを制御します。
	"editor.colorDecorators": true,

	// マウスとキーでの選択により列の選択を実行できるようにします。
	"editor.columnSelection": false,

	// 行コメントの追加または削除アクションの切り替えで、空の行を無視するかどうかを制御します。
	"editor.comments.ignoreEmptyLines": true,

	// コメント時に空白文字を挿入するかどうかを制御します。
	"editor.comments.insertSpace": true,

	// 構文ハイライトをクリップボードにコピーするかどうかを制御します。
	"editor.copyWithSyntaxHighlighting": true,

	// カーソルのアニメーション方式を制御します。
	"editor.cursorBlinking": "blink",

	// 滑らかなキャレットアニメーションを有効にするかどうかを制御します。
	"editor.cursorSmoothCaretAnimation": false,

	// カーソルのスタイルを制御します。
	"editor.cursorStyle": "line",

	// カーソル前後の表示可能な先頭と末尾の行の最小数を制御します。他の一部のエディターでは 'scrollOff' または `scrollOffset` と呼ばれます。
	"editor.cursorSurroundingLines": 0,

	// 'カーソルの周囲の行' を適用するタイミングを制御します。
	//  - default: `cursorSurroundingLines` は、キーボードまたは API でトリガーされた場合にのみ強制されます。
	//  - all: `cursorSurroundingLines` は常に適用されます。
	"editor.cursorSurroundingLinesStyle": "default",

	// `editor.cursorStyle` が `line` に設定されている場合、カーソルの幅を制御します。
	"editor.cursorWidth": 0,

	// 他のすべての折りたたみ範囲プロバイダーよりも優先される既定の折りたたみ範囲プロバイダーを定義します。折りたたみ範囲プロバイダーに貢献する拡張機能の識別子である必要があります。
	//  - null: すべてのアクティブな折りたたみ範囲プロバイダー
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub 認証プロバイダー
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - vincaslt.highlight-matching-tag: Highlights matching closing and opening tags
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - vscode.media-preview: 画像、オーディオ、ビデオの VS Code の組み込みプレビューを提供します
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft 認証プロバイダー
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - ms-vscode-remote.remote-wsl: Linux 用 Windows サブシステム (WSL) 内の任意のフォルダーを開き、Visual Studio Codeの完全な機能セットを利用します。
	//  - vscode.simple-browser: Web コンテンツを表示するための非常に基本的な組み込みの Web ビューです。
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	"editor.defaultFoldingRangeProvider": null,

	// 他のすべてのフォーマッタ設定よりも優先される、既定のフォーマッタを定義します。フォーマッタを提供している拡張機能の識別子にする必要があります。
	//  - null: なし
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - dbaeumer.vscode-eslint: Integrates ESLint JavaScript into VS Code.
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - vscode.emmet: Emmet support for VS Code
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - vscode.git: Git SCM Integration
	//  - vscode.git-base: Git static contributions and pickers.
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub 認証プロバイダー
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - vincaslt.highlight-matching-tag: Highlights matching closing and opening tags
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - vscode.media-preview: 画像、オーディオ、ビデオの VS Code の組み込みプレビューを提供します
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft 認証プロバイダー
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - ms-vscode-remote.remote-wsl: Linux 用 Windows サブシステム (WSL) 内の任意のフォルダーを開き、Visual Studio Codeの完全な機能セットを利用します。
	//  - vscode.simple-browser: Web コンテンツを表示するための非常に基本的な組み込みの Web ビューです。
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	"editor.defaultFormatter": null,

	// [定義へ移動] マウス ジェスチャーで、常にピーク ウィジェットを開くかどうかを制御します。
	"editor.definitionLinkOpensInPeek": false,

	// ファイルがファイルの内容に基づいて開かれる場合、`editor.tabSize#` と `#editor.insertSpaces` を自動的に検出するかどうかを制御します。
	"editor.detectIndentation": true,

	// ドラッグ アンド ドロップによる選択範囲の移動をエディターが許可するかどうかを制御します。
	"editor.dragAndDrop": true,

	// (エディターでファイルを開く代わりに) 'shift' を押しながらテキスト エディターにファイルをドラッグ アンド ドロップできるかどうかを制御します。
	"editor.dropIntoEditor.enabled": true,

	// 選択範囲を指定しないでコピーする場合に現在の行をコピーするかどうかを制御します。
	"editor.emptySelectionClipboard": true,

	// 貼り付け時に拡張機能からの編集の実行を有効化/無効化してください。
	"editor.experimental.pasteActions.enabled": false,

	// `Alt` を押すと、スクロール速度が倍増します。
	"editor.fastScrollSensitivity": 5,

	// 検索ウィジェットがエディターの上に行をさらに追加するかどうかを制御します。true の場合、検索ウィジェットが表示されているときに最初の行を超えてスクロールできます。
	"editor.find.addExtraSpaceOnTop": true,

	// [選択範囲を検索] を自動的にオンにする条件を制御します。
	//  - never: [選択範囲を検索] を自動的にオンにしません (既定)。
	//  - always: [選択範囲を検索] を常に自動的にオンにします。
	//  - multiline: 複数行のコンテンツが選択されている場合は、[選択範囲を検索] を自動的にオンにします。
	"editor.find.autoFindInSelection": "never",

	// 入力中に一致を検索するためにカーソルをジャンプさせるかどうかを制御します。
	"editor.find.cursorMoveOnType": true,

	// 以降で一致が見つからない場合に、検索を先頭から (または末尾から) 自動的に再実行するかどうか制御します。
	"editor.find.loop": true,

	// エディターの選択範囲から検索ウィジェット内の検索文字列を与えるかどうかを制御します。
	//  - never: エディターの選択範囲から検索文字列をシードしません。
	//  - always: カーソル位置にある単語を含め、エディターの選択範囲から検索文字列を常にシードします。
	//  - selection: エディターの選択範囲から検索文字列のみをシードします。
	"editor.find.seedSearchStringFromSelection": "always",

	// エディターでコードの折りたたみを有効にするかどうかを制御します。
	"editor.folding": true,

	// エディターで折りたたまれた範囲を強調表示するかどうかをコントロールします。
	"editor.foldingHighlight": true,

	// エディターがインポート範囲を自動的に折りたたむかどうかを制御します。
	"editor.foldingImportsByDefault": false,

	// 折りたたみ可能な領域の最大数です。この値を大きくすると、現在のソースに多数の折りたたみ可能な領域がある場合にエディターの応答性が低下する可能性があります。
	"editor.foldingMaximumRegions": 5000,

	// 折りたたみ範囲の計算方法を制御します。
	//  - auto: 利用可能な場合は言語固有の折りたたみ方法を使用し、利用可能ではない場合はインデントベースの方法を使用します。
	//  - indentation: インデントベースの折りたたみ方法を使用します。
	"editor.foldingStrategy": "auto",

	// フォント ファミリを制御します。
	"editor.fontFamily": "Consolas, 'Courier New', monospace",

	// フォントの合字やフォントの機能を構成します。合字を有効または無効にするブール値または CSS 'font-feature-settings' プロパティの値の文字列を指定できます。
	"editor.fontLigatures": false,

	// フォント サイズ (ピクセル単位) を制御します。
	"editor.fontSize": 14,

	// フォントのバリエーションを構成します。font-weight から font-variation-settings への変換を有効/無効にするブール値、または CSS 'font-variation-settings' プロパティの値の文字列のいずれかです。
	"editor.fontVariations": false,

	// フォントの太さを制御します。"標準" および "太字" のキーワードまたは 1 ～ 1000 の数字を受け入れます。
	"editor.fontWeight": "normal",

	// 貼り付けた内容がエディターにより自動的にフォーマットされるかどうかを制御します。フォーマッタを使用可能にする必要があります。また、フォーマッタがドキュメント内の範囲をフォーマットできなければなりません。
	"editor.formatOnPaste": false,

	// ファイルを保存するときにフォーマットします。フォーマッタが有効でなければなりません。ファイルの遅延保存やエディターを閉じることは許可されていません。
	"editor.formatOnSave": false,

	// 保存の形式でファイル全体をフォーマット指定するか、変更のみをフォーマットするかを制御します。`editor.formatOnSave` が有効な場合にのみ適用されます。
	//  - file: ファイル全体をフォーマットします。
	//  - modifications: 変更をフォーマットします (ソース管理が必要)。
	//  - modificationsIfAvailable: 変更部分のみのフォーマットを試みます (ソース管理が必要)。ソース管理が使用できない場合は、ファイル全体がフォーマットされます。
	"editor.formatOnSaveMode": "file",

	// エディターで入力後に自動的に行のフォーマットを行うかどうかを制御します。
	"editor.formatOnType": false,

	// エディターで縦のグリフ余白が表示されるかどうかを制御します。ほとんどの場合、グリフ余白はデバッグに使用されます。
	"editor.glyphMargin": true,

	// '宣言へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// '定義へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// '実装へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// '参照へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// '型定義へ移動' の結果が現在の場所である場合に実行される代替コマンド ID。
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// この設定は非推奨です。代わりに、'editor.editor.gotoLocation.multipleDefinitions' や 'editor.editor.gotoLocation.multipleImplementations' などの個別の設定を使用してください。
	// 
	"editor.gotoLocation.multiple": null,

	// 複数のターゲットの場所があるときの '宣言へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleDeclarations": "peek",

	// 複数のターゲットの場所があるときの '定義へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleDefinitions": "peek",

	// 複数のターゲットの場所があるときの '実装に移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleImplementations": "peek",

	// ターゲットの場所が複数存在する場合の '参照へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleReferences": "peek",

	// 複数のターゲットの場所があるときの '型定義へ移動' コマンドの動作を制御します。
	//  - peek: 結果のピーク ビューを表示 (既定)
	//  - gotoAndPeek: 主な結果に移動し、ピーク ビューを表示します
	//  - goto: プライマリ結果に移動し、他のユーザーへのピークレス ナビゲーションを有効にします
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// ブラケット ペアのガイドを有効にするかどうかを制御します。
	//  - true: ブラケット ペア ガイドを有効にする。
	//  - active: アクティブなブラケット ペアに対してのみブラケット ペア ガイドを有効にします。
	//  - false: ブラケット ペア ガイドを無効にします。
	"editor.guides.bracketPairs": false,

	// 水平方向のブラケット ペアのガイドを有効にするかどうかを制御します。
	//  - true: 縦のブラケット ペアのガイドに加えて、同じく水平のガイドを有効にします。
	//  - active: アクティブなブラケット ペアに対してのみ、水平のガイドを有効にします。
	//  - false: 水平ブラケット ペア ガイドを無効にします。
	"editor.guides.bracketPairsHorizontal": "active",

	// エディターでアクティブな角かっこのペアを強調表示するかどうかを制御します。
	"editor.guides.highlightActiveBracketPair": true,

	// エディターでアクティブなインデントのガイドを強調表示するかどうかを制御します。
	//  - true: アクティブなインデント ガイドを強調表示します。
	//  - always: 角かっこガイドが強調表示されている場合でも、アクティブなインデント ガイドを強調表示します。
	//  - false: アクティブなインデント ガイドを強調表示しないでください。
	"editor.guides.highlightActiveIndentation": true,

	// エディターでインデント ガイドを表示するかどうかを制御します。
	"editor.guides.indentation": true,

	// 概要ルーラーでカーソルを非表示にするかどうかを制御します。
	"editor.hideCursorInOverviewRuler": false,

	// スペースがある場合は、行の上にマウス カーソルを被せて表示する。
	"editor.hover.above": true,

	// ホバーを表示後の待ち時間 (ミリ秒) を制御します。
	"editor.hover.delay": 300,

	// ホバーを表示するかどうかを制御します。
	"editor.hover.enabled": true,

	// ホバーにマウスを移動したときに、ホバーを表示し続けるかどうかを制御します。
	"editor.hover.sticky": true,

	// インデントまたは `"tabSize"` で `editor.tabSize#` の値を使用するために使用されるスペースの数。この設定は、 `#editor.detectIndentation` がオンの場合、ファイルの内容に基づいてオーバーライドされます。
	"editor.indentSize": "tabSize",

	// エディターでインレー ヒントを有効にします。
	//  - on: インレイ ヒントが有効になっています
	//  - onUnlessPressed: インレイ ヒントは既定で表示され、Ctrl+Alt を押したままにすると非表示になります
	//  - offUnlessPressed: インレイ ヒントは既定では非表示になり、Ctrl+Alt を押したままにすると表示されます
	//  - off: インレイ ヒントが無効になっています
	"editor.inlayHints.enabled": "on",

	// エディターで解説ヒントのフォント ファミリを制御します。空に設定すると、 `editor.fontFamily` が使用されます。
	"editor.inlayHints.fontFamily": "",

	// エディターでの解説ヒントのフォント サイズを制御します。既定では、`editor.fontSize` は、構成された値が `5` より小さいか、エディターのフォント サイズより大きい場合に使用されます。
	"editor.inlayHints.fontSize": 0,

	// エディターでのインレイ ヒントに関するパディングを有効にします。
	"editor.inlayHints.padding": false,

	// エディターにインライン候補を自動的に表示するかどうかを制御します。
	"editor.inlineSuggest.enabled": true,

	// `Tab` キーを押すとスペースが挿入されます。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます。
	"editor.insertSpaces": true,

	// インデントを増減する角かっこを定義します。
	"editor.language.brackets": null,

	// 角かっこのペアの色付けが有効になっている場合、入れ子のレベルによって色付けされる角かっこのペアを定義します。
	"editor.language.colorizedBracketPairs": null,

	// 大きなファイルでメモリが集中する特定の機能を無効にするための特別な処理。
	"editor.largeFileOptimizations": true,

	// 文字間隔 (ピクセル単位) を制御します。
	"editor.letterSpacing": 0,

	// エディターでコード アクションの電球を有効にします。
	"editor.lightbulb.enabled": true,

	// 行の高さを制御します。
	//  - 0 を使用してフォント サイズから行の高さを自動的に計算します。
	//  - 0 から 8 までの値は、フォント サイズの乗数として使用されます。
	//  - 8 以上の値は有効値として使用されます。
	"editor.lineHeight": 0,

	// 行番号の表示を制御します。
	//  - off: 行番号は表示されません。
	//  - on: 行番号は、絶対値として表示されます。
	//  - relative: 行番号は、カーソル位置までの行数として表示されます。
	//  - interval: 行番号は 10 行ごとに表示されます。
	"editor.lineNumbers": "on",

	// リンクされた編集がエディターで有効にされるかどうかを制御します。言語によっては、編集中に HTML タグなどの関連する記号が更新されます。
	"editor.linkedEditing": false,

	// エディターがリンクを検出してクリック可能な状態にするかどうかを制御します。
	"editor.links": true,

	// 対応するかっこを強調表示します。
	"editor.matchBrackets": "always",

	// この長さを越える行は、パフォーマンス上の理由によりトークン化されません。
	"editor.maxTokenizationLineLength": 20000,

	// ミニマップを自動的に非表示するかどうかを制御します。
	"editor.minimap.autohide": false,

	// ミニマップを表示するかどうかを制御します。
	"editor.minimap.enabled": true,

	// 表示するミニマップの最大幅を特定の列数に制限します。
	"editor.minimap.maxColumn": 120,

	// 行にカラー ブロックではなく実際の文字を表示します。
	"editor.minimap.renderCharacters": true,

	// ミニマップに描画されるコンテンツのスケール: 1、2、または 3。
	"editor.minimap.scale": 1,

	// ミニマップ スライダーを表示するタイミングを制御します。
	"editor.minimap.showSlider": "mouseover",

	// ミニマップを表示する場所を制御します。
	"editor.minimap.side": "right",

	// ミニマップのサイズを制御します。
	//  - proportional: ミニマップのサイズは、エディターのコンテンツと同じです (スクロールする場合があります)。
	//  - fill: ミニマップは、必要に応じて、エディターの高さを埋めるため、拡大または縮小します (スクロールしません)。
	//  - fit: ミニマップは必要に応じて縮小し、エディターより大きくなることはありません (スクロールしません)。
	"editor.minimap.size": "proportional",

	// マウス ホイール スクロール イベントの `deltaX` と `deltaY` で使用される乗数。
	"editor.mouseWheelScrollSensitivity": 1,

	// `Ctrl` キーを押しながらマウス ホイールを使用してエディターのフォントをズームします。
	"editor.mouseWheelZoom": false,

	// アクティブなエディターに一度に配置できるカーソルの最大数を制御します。
	"editor.multiCursorLimit": 10000,

	// 複数のカーソルが重なっているときは、マージします。
	"editor.multiCursorMergeOverlapping": true,

	// マウスを使用して複数のカーソルを追加するために使用する修飾子。[定義に移動] および [リンクを開く] マウス ジェスチャは、[multicursor 修飾子](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier) と競合しないように調整されます。
	//  - ctrlCmd: Windows および Linux 上の `Control` キーと macOS 上の `Command` キーに割り当てます。
	//  - alt: Windows および Linux 上の `Alt` キーと macOS 上の `Option` キーに割り当てます。
	"editor.multiCursorModifier": "alt",

	// 貼り付けたテキストの行数がカーソル数と一致する場合の貼り付けを制御します。
	//  - spread: カーソルごとにテキストを 1 行ずつ貼り付けます。
	//  - full: 各カーソルは全文を貼り付けます。
	"editor.multiCursorPaste": "spread",

	// エディターでセマンティック シンボルの出現箇所を強調表示するかどうかを制御します。
	"editor.occurrencesHighlight": true,

	// 概要ルーラーの周囲に境界線が描画されるかどうかを制御します。
	"editor.overviewRulerBorder": true,

	// エディターの下端と最後の行の間の余白の大きさを制御します。
	"editor.padding.bottom": 0,

	// エディターの上端と最初の行の間の余白の大きさを制御します。
	"editor.padding.top": 0,

	// パラメーター ヒント メニューを周回するか、リストの最後で閉じるかどうかを制御します。
	"editor.parameterHints.cycle": false,

	// 入力時にパラメーター ドキュメントと型情報を表示するポップアップを有効にします。
	"editor.parameterHints.enabled": true,

	// ピーク ウィジェットのインライン エディターまたはツリーをフォーカスするかどうかを制御します。
	//  - tree: ピークを開くときにツリーにフォーカスする
	//  - editor: ピークを開くときにエディターにフォーカスする
	"editor.peekWidgetDefaultFocus": "tree",

	// 入力中に候補を自動的に表示するかどうかを制御します。これは、コメント、文字列、その他コードの入力用に設定できます。クイック提案は、ゴースト テキストとして表示するか、提案ウィジェットで表示するように構成できます。また、'#editor.suggestOnTriggerCharacters#' に注意してください。これは、提案が特殊文字によってトリガーされるかどうかを制御する設定です。
	"editor.quickSuggestions": {
		"other": "on",
		"comments": "off",
		"strings": "off"
	},

	// クイック候補が表示されるまでのミリ秒を制御します。
	"editor.quickSuggestionsDelay": 10,

	// 名前を変更する前に変更をプレビューする機能を有効または無効にする
	"editor.rename.enablePreview": true,

	// 非推奨です。代わりに、`editor.linkedEditing` を使用してください。
	// エディターでの型の自動名前変更を制御します。
	"editor.renameOnType": false,

	// エディターで制御文字を表示するかどうかを制御します。
	"editor.renderControlCharacters": true,

	// ファイルの末尾が改行の場合は、最後の行番号を表示します。
	"editor.renderFinalNewline": true,

	// エディターが現在の行をどのように強調表示するかを制御します。
	//  - none
	//  - gutter
	//  - line
	//  - all: 余白と現在の行を強調表示します。
	"editor.renderLineHighlight": "line",

	// エディターにフォーカスがある場合にのみ現在の行をエディターで強調表示する必要があるかどうかを制御します。
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// エディターで空白文字を表示するかどうかを制御します。
	//  - none
	//  - boundary: 単語間の単一スペース以外の空白文字を表示します。
	//  - selection: 選択したテキストにのみ空白文字を表示します。
	//  - trailing: 末尾の空白文字のみを表示します。
	//  - all
	"editor.renderWhitespace": "selection",

	// 選択範囲の角を丸くするかどうかを制御します。
	"editor.roundedSelection": true,

	// 特定の等幅文字数の後に垂直ルーラーを表示します。複数のルーラーには複数の値を使用します。配列が空の場合はルーラーを表示しません。
	"editor.rulers": [],

	// 水平スクロールバーの表示を制御します。
	//  - auto: 水平スクロールバーは、必要な場合にのみ表示されます。
	//  - visible: 水平スクロールバーは常に表示されます。
	//  - hidden: 水平スクロールバーは常に非表示になります。
	"editor.scrollbar.horizontal": "auto",

	// 水平スクロールバーの高さ。
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// クリックするとページ単位でスクロールするか、クリック位置にジャンプするかを制御します。
	"editor.scrollbar.scrollByPage": false,

	// 垂直スクロールバーの表示を制御します。
	//  - auto: 垂直スクロールバーは、必要な場合にのみ表示されます。
	//  - visible: 垂直スクロールバーは常に表示されます。
	//  - hidden: 垂直スクロールバーは常に非表示になります。
	"editor.scrollbar.vertical": "auto",

	// 垂直スクロールバーの幅。
	"editor.scrollbar.verticalScrollbarSize": 14,

	// エディターが水平方向に余分にスクロールする文字数を制御します。
	"editor.scrollBeyondLastColumn": 4,

	// エディターが最後の行を越えてスクロールするかどうかを制御します。
	"editor.scrollBeyondLastLine": true,

	// 垂直および水平方向の両方に同時にスクロールする場合は、主要な軸に沿ってスクロールします。トラックパッド上で垂直方向にスクロールする場合は、水平ドリフトを防止します。
	"editor.scrollPredominantAxis": true,

	// エディターが選択項目と類似の一致項目を強調表示するかどうかを制御します。
	"editor.selectionHighlight": true,

	// semanticHighlighting をサポートされる言語で表示するかどうかを制御します。
	//  - true: セマンティックの強調表示がすべての配色テーマについて有効になりました。
	//  - false: セマンティックの強調表示がすべての配色テーマについて無効になりました。
	//  - configuredByTheme: セマンティックの強調表示は、現在の配色テーマの 'semanticHighlighting' 設定によって構成されています。
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// 現在選択されている配色テーマからの、エディターのセマンティック トークンの色とスタイルをオーバーライドします。
	"editor.semanticTokenColorCustomizations": {},

	// 非推奨の変数の取り消し線を制御します。
	"editor.showDeprecated": true,

	// とじしろのの折りたたみコントロールを表示するタイミングを制御します。
	//  - always: 常に折りたたみコントロールを表示します。
	//  - never: 折りたたみコントロールを表示せず、余白のサイズを小さくします。
	//  - mouseover: マウスがとじしろの上にあるときにのみ、折りたたみコントロールを表示します。
	"editor.showFoldingControls": "mouseover",

	// 使用されていないコードのフェードアウトを制御します。
	"editor.showUnused": true,

	// 先頭と末尾の空白を常に選択するかどうか。
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// アニメーションでエディターをスクロールするかどうかを制御します。
	"editor.smoothScrolling": false,

	// ブロック付きスニペットまたはファイル テンプレート スニペットがコード アクションとして表示されるかどうかを制御します。
	"editor.snippets.codeActions.enabled": true,

	// 他の修正候補と一緒にスニペットを表示するかどうか、およびその並び替えの方法を制御します。
	//  - top: 他の候補の上にスニペットの候補を表示します。
	//  - bottom: 他の候補の下にスニペットの候補を表示します。
	//  - inline: 他の候補と一緒にスニペットの候補を表示します。
	//  - none: スニペットの候補を表示しません。
	"editor.snippetSuggestions": "inline",

	// エディターのコンテンツをダブルクリックするか、`Escape` キーを押しても、ピーク エディターを開いたままにします。
	"editor.stablePeek": false,

	// スクロール中にエディターの上部に入れ子になった現在のスコープを表示します。
	"editor.stickyScroll.enabled": false,

	// 表示する追従行の最大数を定義します。
	"editor.stickyScroll.maxLineCount": 5,

	// インデントにスペースを使用するときは、タブ文字の選択動作をエミュレートします。選択範囲はタブ位置に留まります。
	"editor.stickyTabStops": false,

	// 候補のフィルター処理と並び替えでささいな入力ミスを考慮するかどうかを制御します。
	"editor.suggest.filterGraceful": true,

	// 入力候補を受け入れるときに単語を上書きするかどうかを制御します。これは、この機能の利用を選択する拡張機能に依存することにご注意ください。
	//  - insert: カーソルの右のテキストを上書きせずに候補を挿入します。
	//  - replace: 候補を挿入し、カーソルの右のテキストを上書きします。
	"editor.suggest.insertMode": "insert",

	// 並べ替えがカーソル付近に表示される単語を優先するかどうかを制御します。
	"editor.suggest.localityBonus": false,

	// 有効にすると、IntelliSense のフィルター処理では、単語の先頭で最初の文字が一致する必要があります。たとえば、`Console` や `WebContext` の場合は `c`、`description` の場合は _not_ です。無効にすると、IntelliSense はより多くの結果を表示しますが、一致品質で並べ替えられます。
	"editor.suggest.matchOnWordStartOnly": true,

	// この設定は非推奨です。候補ウィジェットのサイズ変更ができるようになりました。
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// 提案の結果をエディターでプレビューするかどうかを制御します。
	"editor.suggest.preview": false,

	// 保存された候補セクションを複数のワークプレースとウィンドウで共有するかどうかを制御します (`editor.suggestSelection` が必要)。
	"editor.suggest.shareSuggestSelections": false,

	// 有効にすると、IntelliSense に 'クラス' 候補が表示されます。
	"editor.suggest.showClasses": true,

	// 有効にすると、IntelliSense に `色` 候補が表示されます。
	"editor.suggest.showColors": true,

	// 有効にすると、IntelliSense に `定数` 候補が表示されます。
	"editor.suggest.showConstants": true,

	// 有効にすると、IntelliSense に `コンストラクター` 候補が表示されます。
	"editor.suggest.showConstructors": true,

	// 有効にすると、IntelliSense に `customcolor` 候補が表示されます。
	"editor.suggest.showCustomcolors": true,

	// 有効にすると、IntelliSense に `非推奨` 候補が表示されます。
	"editor.suggest.showDeprecated": true,

	// 有効にすると、IntelliSense に `enumMember` 候補が表示されます。
	"editor.suggest.showEnumMembers": true,

	// 有効にすると、IntelliSense に `列挙型` 候補が表示されます。
	"editor.suggest.showEnums": true,

	// 有効にすると、IntelliSense に `イベント` 候補が表示されます。
	"editor.suggest.showEvents": true,

	// 有効にすると、IntelliSense に `フィールド` 候補が表示されます。
	"editor.suggest.showFields": true,

	// 有効にすると、IntelliSense に 'ファイル' 候補が表示されます。
	"editor.suggest.showFiles": true,

	// 有効にすると、IntelliSense に `フォルダー` 候補が表示されます。
	"editor.suggest.showFolders": true,

	// 有効にすると、IntelliSense に `関数` 候補が表示されます。
	"editor.suggest.showFunctions": true,

	// 提案のアイコンを表示するか、非表示にするかを制御します。
	"editor.suggest.showIcons": true,

	// 候補の詳細をラベル付きのインラインで表示するか、詳細ウィジェットにのみ表示するかを制御します。
	"editor.suggest.showInlineDetails": true,

	// 有効にすると、IntelliSense に `インターフェイス` 候補が表示されます。
	"editor.suggest.showInterfaces": true,

	// 有効にすると、IntelliSense によって '問題' 候補が示されます。
	"editor.suggest.showIssues": true,

	// 有効にすると、IntelliSense に `キーワード` 候補が表示されます。
	"editor.suggest.showKeywords": true,

	// 有効にすると、IntelliSense に `メソッド` 候補が表示されます。
	"editor.suggest.showMethods": true,

	// 有効にすると、IntelliSense に `モジュール` 候補が表示されます。
	"editor.suggest.showModules": true,

	// 有効にすると、IntelliSense に `演算子` 候補が表示されます。
	"editor.suggest.showOperators": true,

	// 有効にすると、IntelliSense に `プロパティ` 候補が表示されます。
	"editor.suggest.showProperties": true,

	// 有効にすると、IntelliSense に `参照` 候補が表示されます。
	"editor.suggest.showReferences": true,

	// 有効にすると、IntelliSense に `スニペット` 候補が表示されます。
	"editor.suggest.showSnippets": true,

	// 候補ウィジェットの下部にあるステータス バーの表示を制御します。
	"editor.suggest.showStatusBar": false,

	// 有効にすると、IntelliSense に `構造体` 候補が表示されます。
	"editor.suggest.showStructs": true,

	// 有効にすると、IntelliSense に `typeParameter` 候補が表示されます。
	"editor.suggest.showTypeParameters": true,

	// 有効にすると、IntelliSense に `ユニット` 候補が表示されます。
	"editor.suggest.showUnits": true,

	// 有効な場合、IntelliSense によって 'ユーザー' 候補が示されます。
	"editor.suggest.showUsers": true,

	// 有効にすると、IntelliSense に `値` 候補が表示されます。
	"editor.suggest.showValues": true,

	// 有効にすると、IntelliSense に `変数` 候補が表示されます。
	"editor.suggest.showVariables": true,

	// 有効にすると、IntelliSense に 'テキスト' -候補が表示されます。
	"editor.suggest.showWords": true,

	// アクティブ スニペットがクイック候補を防止するかどうかを制御します。
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// 候補ウィジェットのフォント サイズ。`0` に設定すると、値 `editor.fontSize` が使用されます。
	"editor.suggestFontSize": 0,

	// 候補ウィジェットの行の高さ。`0` に設定すると、`editor.lineHeight` の値が使用されます。最小値は 8 です。
	"editor.suggestLineHeight": 0,

	// トリガー文字の入力時に候補が自動的に表示されるようにするかどうかを制御します。
	"editor.suggestOnTriggerCharacters": true,

	// 候補リストを表示するときに候補を事前に選択する方法を制御します。
	//  - first: 常に最初の候補を選択します。
	//  - recentlyUsed: `console.| -> console.log` などと選択対象に関して入力しない限りは、最近の候補を選択します。`log` は最近完了したためです。
	//  - recentlyUsedByPrefix: これらの候補を完了した以前のプレフィックスに基づいて候補を選択します。例: `co -> console` および `con -> const`。
	"editor.suggestSelection": "first",

	// タブ補完を有効にします。
	//  - on: タブ補完は、tab キーを押したときに最適な候補を挿入します。
	//  - off: タブ補完を無効にします。
	//  - onlySnippets: プレフィックスが一致する場合に、タブでスニペットを補完します。'quickSuggestions' が無効な場合に最適です。
	"editor.tabCompletion": "off",

	// 1 つのタブに相当するスペースの数。`editor.detectIndentation` がオンの場合、この設定はファイル コンテンツに基づいて上書きされます。
	"editor.tabSize": 4,

	// エディターの構文の色とフォント スタイルを、現在選択されている配色テーマからオーバーライドします。
	"editor.tokenColorCustomizations": {},

	// 自動挿入された末尾の空白を削除します。
	"editor.trimAutoWhitespace": true,

	// 折りたたまれた行の後の空のコンテンツをクリックすると行が展開されるかどうかを制御します。
	"editor.unfoldOnClickAfterEndOfLine": false,

	// 強調表示せず許可される文字を定義します。
	"editor.unicodeHighlight.allowedCharacters": {},

	// 許可されているロケールで一般的な Unicode 文字は強調表示されません。
	"editor.unicodeHighlight.allowedLocales": {
		"_os": true,
		"_vscode": true
	},

	// 現在のユーザー ロケールで一般的な文字を除き、基本的な ASCII 文字と混同される可能性のある文字を強調表示するかどうかを制御します。
	"editor.unicodeHighlight.ambiguousCharacters": true,

	// コメント内の文字を Unicode 強調表示の対象にするかどうかを制御します。
	"editor.unicodeHighlight.includeComments": "inUntrustedWorkspace",

	// 文字列内の文字を Unicode 強調表示の対象にするかどうかを制御します。
	"editor.unicodeHighlight.includeStrings": true,

	// 空白を占めるだけの文字や幅がまったくない文字を強調表示するかどうかを制御します。
	"editor.unicodeHighlight.invisibleCharacters": true,

	// 基本 ASCII 以外のすべての文字を強調表示するかどうかを制御します。U+0020 から U+007E の間の文字、タブ、改行 (LF)、行頭復帰のみが基本 ASCII と見なされます。
	"editor.unicodeHighlight.nonBasicASCII": "inUntrustedWorkspace",

	// 問題を起こす可能性がある、普通ではない行終端記号は削除してください。
	//  - auto: 通常とは異なる行の終端文字は自動的に削除される。
	//  - off: 通常とは異なる行の終端文字は無視される。
	//  - prompt: 通常とは異なる行の終端文字の削除プロンプトが表示される。
	"editor.unusualLineTerminators": "prompt",

	// 空白の挿入や削除はタブ位置に従って行われます。
	"editor.useTabStops": true,

	// ドキュメント内の単語に基づいて入力候補を計算するかどうかを制御します。
	"editor.wordBasedSuggestions": true,

	// 単語ベースの入力候補が計算されるドキュメントを制御します。
	//  - currentDocument: アクティブなドキュメントからのみ単語の候補を表示します。
	//  - matchingDocuments: 同じ言語の開いているすべてのドキュメントから単語の候補を表示します。
	//  - allDocuments: 開いているすべてのドキュメントから単語の候補を表示します。
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// 中国語/日本語/韓国語 (CJK) テキストに使用される単語区切り規則を制御します。
	//  - normal: 既定の改行ルールを使用します。
	//  - keepAll: 中国語/日本語/韓国語 (CJK) のテキストには単語区切りを使用しないでください。CJK 以外のテキストの動作は、通常の場合と同じです。
	"editor.wordBreak": "normal",

	// 単語に関連したナビゲーションまたは操作を実行するときに、単語の区切り文字として使用される文字。
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// 行の折り返し方法を制御します。
	//  - off: 行を折り返しません。
	//  - on: 行をビューポートの幅で折り返します。
	//  - wordWrapColumn: `editor.wordWrapColumn` で行を折り返します。
	//  - bounded: ビューポートと `editor.wordWrapColumn` の最小値で行を折り返します。
	"editor.wordWrap": "off",

	// `editor.wordWrap` が `wordWrapColumn` または `bounded` の場合に、エディターの折り返し桁を制御します。
	"editor.wordWrapColumn": 80,

	// 折り返し行のインデントを制御します。
	//  - none: インデントしません。 折り返し行は列 1 から始まります。
	//  - same: 折り返し行は、親と同じインデントになります。
	//  - indent: 折り返し行は、親 +1 のインデントになります。
	//  - deepIndent: 折り返し行は、親 +2 のインデントになります。
	"editor.wrappingIndent": "same",

	// 折り返しポイントを計算するアルゴリズムを制御します。アクセシビリティ モードでは、最高のエクスペリエンスを実現するために詳細設定が使用されることにご注意ください。
	//  - simple: すべての文字の幅が同じであると仮定します。これは、モノスペース フォントや、グリフの幅が等しい特定のスクリプト (ラテン文字など) で正しく動作する高速アルゴリズムです。
	//  - advanced: 折り返しポイントの計算をブラウザーにデリゲートします。これは、大きなファイルのフリーズを引き起こす可能性があるものの、すべてのケースで正しく動作する低速なアルゴリズムです。
	"editor.wrappingStrategy": "simple",

	// ソース管理ビューでインラインのアクションを常に表示するかどうかを制御します。
	"scm.alwaysShowActions": false,

	// リポジトリがソース管理ビューに常に表示される必要があるかどうかを制御します。
	"scm.alwaysShowRepositories": false,

	// ファイルを開くときに ソース管理ビューでそのファイルを自動的に表示および選択するかどうかを制御します。
	"scm.autoReveal": true,

	// アクティビティ バーのソース管理アイコンのカウント バッジを制御します。
	//  - all: すべてのソース管理プロバイダー カウント バッジの合計を表示します。
	//  - focused: フォーカスのあるソース管理プロバイダーのカウント バッジを表示します。
	//  - off: ソース管理のカウント バッジを無効にします。
	"scm.countBadge": "all",

	// 既定のソース管理リポジトリ ビュー モードを制御します。
	//  - tree: リポジトリの変更をツリー形式で表示します。
	//  - list: リポジトリの変更を一覧で表示します。
	"scm.defaultViewMode": "list",

	// ソース管理リポジトリがリストとして表示されたときに既定の並べ替え順序を変更するかどうかを制御します。
	//  - name: リポジトリの変更をファイル名で並べ替えます。
	//  - path: リポジトリの変更をパスで並べ替えます。
	//  - status: ソース管理の状態でリポジトリの変更を並べ替えます。
	"scm.defaultViewSortKey": "path",

	// エディターの差分デコレーターを制御します。
	//  - all: 使用可能なすべての場所で差分の装飾を表示します。
	//  - gutter: 差分の装飾はエディターのとじしろでのみ表示します。
	//  - overview: 差分の装飾は、概要ルーラーでのみ表示します。
	//  - minimap: 差分の装飾はミニマップでのみ表示します。
	//  - none: 差分の装飾を表示しません。
	"scm.diffDecorations": "all",

	// ソース管理の差分の余白の装飾に関する動作を制御します。
	//  - diff: クリック時にインライン差分ピーク ビューを表示します。
	//  - none: 何もしない。
	"scm.diffDecorationsGutterAction": "diff",

	// 余白の差分装飾にパターンを使用するかどうかを制御します。
	"scm.diffDecorationsGutterPattern": {
		"added": false,
		"modified": true
	},

	// 余白におけるソース管理の差分デコレーターの表示を制御します。
	//  - always: 常に余白に差分デコレーターを表示します。
	//  - hover: カーソルを置いた時にのみ余白に差分デコレーターを表示します。
	"scm.diffDecorationsGutterVisibility": "always",

	// 余白の差分表示 (追加と変更) の幅 (ピクセル) を制御します。
	"scm.diffDecorationsGutterWidth": 3,

	// ソース管理の差分の余白装飾で先頭と末尾の空白を無視するかどうかを制御します。
	//  - true: 先頭と末尾の空白を無視します。
	//  - false: 先頭と末尾の空白を無視しないでください。
	//  - inherit: 'diffEditor.ignoreTrimWhitespace' から継承します。
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// 入力メッセージのフォントを制御します。ワークベンチ ユーザー インターフェイスのフォント ファミリーを使う場合は 'default'、'#editor.fontFamily#' の値を使う場合は 'editor' を使用します。カスタム フォント ファミリーを使うこともできます。
	"scm.inputFontFamily": "default",

	// 入力メッセージのフォント サイズをピクセル単位で制御します。
	"scm.inputFontSize": 13,

	// ソース管理プロバイダー ヘッダーのカウント バッジを制御します。これらのヘッダーは、複数のプロバイダーがある場合にのみ表示されます。
	//  - hidden: ソース管理プロバイダーのカウント バッジを非表示にします。
	//  - auto: 0 以外の場合にのみ、ソース管理プロバイダーのカウント バッジを表示します。
	//  - visible: ソース管理プロバイダーのカウント バッジを表示します。
	"scm.providerCountBadge": "hidden",

	// ソース管理リポジトリ ビューのリポジトリの並べ替え順序を制御します。
	//  - discovery time: ソース管理リポジトリ ビューのリポジトリは、検出時刻順に並べ替えられます。ソース管理ビューのリポジトリは、選択された順序で並べ替えられます。
	//  - name: ソース管理リポジトリおよびソース管理ビューのリポジトリは、リポジトリ名で並べ替えられます。
	//  - path: ソース管理リポジトリおよびソース管理ビューのリポジトリは、リポジトリ パスで並べ替えられます。
	"scm.repositories.sortOrder": "discovery time",

	// ソース管理リポジトリのセクションに表示するリポジトリの数を制御します。0 に設定すると、ビューのサイズを手動で変更できるようになります。
	"scm.repositories.visible": 10,

	// ソース管理ビューにアクション ボタンを表示するかどうかを制御します。
	"scm.showActionButton": true,

	// 制限モードでバナーを表示するタイミングを制御します。
	//  - always: 信頼されていないワークスペースが開かれるたびにバナーを表示します。
	//  - untilDismissed: 信頼されていないワークスペースが初めて開かれる場合、閉じられるまでバナーを表示します。
	//  - never: 信頼されていないワークスペースが開かれる場合はバナーを表示しません。
	"security.workspace.trust.banner": "untilDismissed",

	// 空のウィンドウを VS Code 内で既定で信頼するかどうかを制御します。'#security.workspace.trust.untrustedFiles#' と共に使用すると、空のウィンドウでプロンプトを表示せずに、VS Code のすべての機能を有効にすることができます。
	"security.workspace.trust.emptyWindow": true,

	// VS Code 内でワークスペースの信頼を有効にするかどうかを制御します。
	"security.workspace.trust.enabled": true,

	// ワークスペースを信頼するための起動メッセージが表示されるタイミングを制御します。
	//  - always: 信頼されていないワークスペースが開かれるたびに信頼を確認します。
	//  - once: 信頼されていないワークスペースが初めて開かれるときに信頼を確認します。
	//  - never: 信頼されていないワークスペースが開かれる場合に信頼を確認しない。
	"security.workspace.trust.startupPrompt": "once",

	// 信頼されたワークスペースで信頼されていないファイルを開くときの取り扱いを制御します。この設定は、'#security.workspace.trust.emptyWindow#' 経由で信頼される空のウィンドウでファイルを開く場合にも適用されます。
	//  - prompt: ワークスペースごとに信頼されていないファイルをどのように処理するかを確認します。信頼されているワークスペースに信頼できないファイルが一度追加されると、再度プロンプトが表示されることはありません。
	//  - open: 確認せずに、信頼されていないファイルを信頼されているワークスペースに追加することを常に許可します。
	//  - newWindow: 確認せずに、制限モードで、信頼されていないファイルを常に別のウィンドウで開く。
	"security.workspace.trust.untrustedFiles": "prompt",

	// ワークベンチのアクティビティ バー アイコンをクリックする動作を制御します。
	//  - toggle: クリックした項目が既に表示されている場合は、サイド バーを非表示にします。
	//  - focus: クリックした項目が既に表示されている場合は、サイド バーにフォーカスします。
	"workbench.activityBar.iconClickBehavior": "toggle",

	// ワークベンチでのアクティビティ バーの表示をコントロールします。
	"workbench.activityBar.visible": true,

	// 現在のワークスペースのクラウドに保存されている使用可能な作業変更を自動的に再開するかどうかを制御します。
	//  - onReload: ウィンドウの再読み込み時に、クラウドから使用可能な作業変更を自動的に再開します。
	//  - off: クラウドから作業変更を再開しないでください。
	"workbench.cloudChanges.autoResume": "onReload",

	// [作業の続行] を使用するときに、クラウドに作業変更を保存するようユーザーに確認するかどうかを制御します。
	//  - prompt: [作業を続行] を使用して作業変更をクラウドに保存するためにサインインするようユーザーに確認します。
	//  - off: ユーザーがクラウドの変更を既に有効にしていない限り、[作業を続行] を使用してクラウドに作業変更を保存しないでください。
	"workbench.cloudChanges.continueOn": "prompt",

	// 現在選択している配色テーマで配色を上書きします。
	"workbench.colorCustomizations": {},

	// ワークベンチで使用される配色テーマを指定します。
	"workbench.colorTheme": "Default Dark+",

	// コマンド パレットで最近使用したコマンド履歴を保持する数を制御します。0 に設定するとコマンド履歴を無効にします。
	"workbench.commandPalette.history": 50,

	// コマンド パレットを次回開いたとき、コマンド パレットの最後の入力を復元するかどうかを制御します。
	"workbench.commandPalette.preserveInput": false,

	// リストのいずれかの種類と一致するエディターがエディター グループの最初のものとして開いており、複数のグループが開いている場合、グループは自動的にロックされます。ロックされたグループは、ユーザーのジェスチャ (例: ドラッグ アンド ドロップ) で明示的に選択された場合に、エディターを開くときにのみ使用されますが、既定では使用されません。その結果、ロックされたグループ内のアクティブなエディターが、誤って別のエディターで置き換えられる可能性は低くなります。
	"workbench.editor.autoLockGroups": {
		"default": false,
		"workbench.editorinputs.searchEditorInput": false,
		"imagePreview.previewEditor": false,
		"vscode.audioPreview": false,
		"vscode.videoPreview": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"jsProfileVisualizer.heapprofile.table": false,
		"jupyter-notebook": false,
		"terminalEditor": true,
		"workbench.input.interactive": false,
		"mainThreadWebview-markdown.preview": false
	},

	// 複数のグループが開かれているとき、中央揃えのレイアウトを自動的に横幅最大にするかどうかを制御します。1 つのグループのみが開かれている場合は、元の中央揃えの横幅に戻ります。
	"workbench.editor.centeredLayoutAutoResize": true,

	// 空のエディターのグループにある最後のタブを閉じたときの動作を制御します。有効であるとき、空のグループは自動的に閉じられます。無効であるとき、空のグループはグリッドの一部として残ります。
	"workbench.editor.closeEmptyGroups": true,

	// セッション中のファイルを表示しているエディターが、その他のプロセスによって削除されるか名前を変更された場合に、エディターを自動的に閉じるかどうかを制御します。これを無効にすると、このような場合にエディターを開き続けます。アプリケーション内で削除すると、エディターは常に閉じられ、変更が保存されていないエディターのデータを保存して閉じることはありません。
	"workbench.editor.closeOnFileDelete": false,

	// エディター ファイルの装飾にバッジを使用するかどうかを制御します。
	"workbench.editor.decorations.badges": true,

	// エディター ファイルの装飾に配色を使用するかどうかを制御します。
	"workbench.editor.decorations.colors": true,

	// バイナリとして検出されたファイルの既定のエディター。未定義の場合、ユーザーにはピッカーが掲示されます。
	"workbench.editor.defaultBinaryEditor": "",

	// 開いているエディターをプレビュー エディターとして表示するかどうかを制御します。プレビュー エディターは開いたままではなく、明示的に (ダブル クリックや編集により) 開いたままに設定されるまで再利用されます。ファイル名は斜体で表示されます。
	"workbench.editor.enablePreview": true,

	// エディターからコード ナビゲーションを開始するときに、エディターをプレビュー状態のままにするかどうかを制御します。プレビュー エディターは開いたままではなく、明示的に (ダブル クリックや編集により) 開いたままに設定されるまで再利用されます。`workbench.editor.enablePreview` が無効になっている場合、この値は無視されます。
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Quick Open から開いたエディターをプレビュー エディターとして表示するかどうかを制御します。プレビュー エディターは開いたままではなく、明示的に (ダブルクリックや編集により) 開いたままに設定されるまで再利用されます。`workbench.editor.enablePreview` が無効になっている場合、この値は無視されます。
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// 最近使用した順序でタブを閉じるか、左から右の順にタブを閉じるかを制御します。
	"workbench.editor.focusRecentEditorAfterClose": true,

	// 変更が保存されていないエディターのタブで上罫線を描画するかどうかを制御します。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.highlightModifiedTabs": false,

	// 言語検出でエディター履歴を使用できるようにします。これにより、自動言語検出は最近開かれた言語を優先し、より少ない入力で自動言語検出を動作させることができます。
	"workbench.editor.historyBasedLanguageDetection": true,

	// エディターに表示するラベルの書式を制御します。
	//  - default: ファイルの名前を表示します。タブが有効かつ 1 つのグループ内の 2 つの同名ファイルに各ファイルのパスの区切り記号が追加されます。タブを無効にすると、エディターがアクティブな時にワークスペース フォルダーの相対パスが表示されます。
	//  - short: ディレクトリ名に続けてファイル名を表示します。
	//  - medium: ワークスペース フォルダーからの相対パスに続けてファイル名を表示します。
	//  - long: 絶対パスに続けてファイル名を表示します。
	"workbench.editor.labelFormat": "default",

	// 言語の選択で言語が明示的に設定されている場合を除き、テキスト エディターの言語を自動的に検出するかどうかを制御します。これは、オフにしたくない言語を指定できるように、言語でスコープを設定することもできます。これは、Markdown のような言語 (多くの場合、言語検出で Markdown ではなく埋め込み言語であると認識させる可能性のある他の言語が含まれている) で便利です。
	"workbench.editor.languageDetection": true,

	// 有効にすると、エディターの言語が検出されたコンテンツ言語と一致しない場合のステータス バーのクイック修正が表示されます。
	"workbench.editor.languageDetectionHints": {
		"untitledEditors": true,
		"notebookEditors": true
	},

	// 開いているエディターの数を制限するかどうかを制御します。有効にすると、最近使用されていないエディターが閉じられ、新しく開くエディター用にスペースが確保されます。
	"workbench.editor.limit.enabled": false,

	// 開いているエディターの最大数が、構成された制限にカウントするためにダーティ エディターを除外するかどうかを制御します。
	"workbench.editor.limit.excludeDirty": false,

	// 開いているエディターの最大数をエディター グループごとに適用するか、すべてのエディター グループに適用するかを制御します。
	"workbench.editor.limit.perEditorGroup": false,

	// 開いているエディターの最大数を制御します。`workbench.editor.limit.perEditorGroup` 設定を使用して、エディター グループごと、またはすべてのグループでこの制限を制御します。
	"workbench.editor.limit.value": 10,

	// マウス ボタン 4 と 5 を、それぞれコマンド '前に戻る' と '次に進む' に使用できるようにします。
	"workbench.editor.mouseBackForwardToNavigate": true,

	// '前に戻る' や '次に進む' などのコマンドの履歴ナビゲーションの範囲をエディターで制御します。
	//  - default: 開いているすべてのエディターやエディター グループの間を移動します。
	//  - editorGroup: アクティブ エディター グループのエディター内でのみ移動します。
	//  - editor: アクティブ エディター内でのみ移動します。
	"workbench.editor.navigationScope": "default",

	// エディターを開く場所を制御します。`left` または `right` を選択すると現在アクティブになっているエディターの左または右にエディターを開きます。`first` または `last` を選択すると現在アクティブになっているエディターとは別個にエディターを開きます。
	"workbench.editor.openPositioning": "right",

	// (たとえば、エクスプローラーから) 並べて開く複数のエディターの既定の向きを制御します。既定では、エディターを現在アクティブなものの右側に開きます。`down` に変更すると、エディターを現在アクティブなものの下側に開きます。
	"workbench.editor.openSideBySideDirection": "right",

	// 固定されたエディターのタブのサイズ設定を制御します。固定されたタブは、開いているすべてのタブの先頭に表示され、通常、固定が解除されるまで閉じられません。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	//  - normal: 固定されたタブは、固定されていないタブの外観を継承します。
	//  - compact: 固定されたタブは、コンパクト形式でアイコンまたはエディター名の最初の文字のみが表示されます。
	//  - shrink: 固定されたタブは、エディター名の一部を示すコンパクトな固定サイズに縮小されます。
	"workbench.editor.pinnedTabSizing": "normal",

	// 有効にすると、エディター履歴を考慮した言語検出モデルの方が優先順位が高くなります。
	"workbench.editor.preferHistoryBasedLanguageDetection": false,

	// エディターを閉じた後に再び開いたときに、最後のエディター ビューの状態 (スクロール位置など) を回復します。エディター ビューの状態は、エディター グループごとに保存され、グループが閉じられると破棄されます。エディター グループに以前のビュー状態が見つからなかった場合に、すべてのエディター グループにわたって最後に確認されたビュー状態を使用するには、`workbench.editor.sharedViewState` 設定を使用します。
	"workbench.editor.restoreViewState": true,

	// エディターを開くときに、どこの表示グループにエディターを表示するかどうかを制御します。無効にした場合、エディターは現在のアクティブなエディター グループに優先して開かれます。有効にした場合は、現在のアクティブなエディター グループで開くのではなく、既に開かれた状態のエディターを表示します。特定のグループ内や現在アクティブなグループの横に強制的にエディターを開いた場合などに、この設定が無視される場合もあることにご注意ください。
	"workbench.editor.revealIfOpen": false,

	// タブの上をスクロールしたときに、それらを開くかどうかを制御します。既定では、スクロール時にはタブは表示されるだけで、開かれることはありません。スクロール中に Shift キーを押したままにすると、その間この動作を変更できます。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.scrollToSwitchTabs": false,

	// すべてのエディター グループで最新のエディター ビューの状態 (スクロール位置など) を保持し、エディター グループに対する特定のエディター ビュー状態が検出された場合は復元します。
	"workbench.editor.sharedViewState": false,

	// 開いているエディターをアイコン付きで表示するかどうかを制御します。これにはファイル アイコン テーマも有効にする必要があります。
	"workbench.editor.showIcons": true,

	// 開いているエディターをタブで表示するかどうかを制御します。
	"workbench.editor.showTabs": true,

	// エディター グループ内でエディターが分割された場合のレイアウトを、垂直方向または水平方向に制御します。
	//  - vertical: エディターは上から下に配置されます。
	//  - horizontal: エディターは左から右に配置されます。
	"workbench.editor.splitInGroupLayout": "horizontal",

	// エディターまたはファイルをエディター領域の端にドロップして、エディター グループをドラッグ アンド ドロップ操作から分割できるかどうかを制御します。
	"workbench.editor.splitOnDragAndDrop": true,

	// エディター グループの分割時のサイズを制御します。
	//  - distribute: すべてのエディター グループを等分に分割します。
	//  - split: アクティブなエディター グループを等分に分割します。
	"workbench.editor.splitSizing": "distribute",

	// エディターのタブの [閉じる] ボタンの位置を制御するか、'off' に設定された場合に無効にします。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.tabCloseButton": "right",

	// エディターのタブのサイズ設定を制御します。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	//  - fit: 常に完全なエディター ラベルを表示するのに足りるタブの大きさを維持します。
	//  - shrink: すべてのタブを一度に表示するには利用可能なスペースが足りない場合に、タブを縮小するようにします。
	"workbench.editor.tabSizing": "fit",

	// エディター タイトル領域のタブおよび階層リンクに使用するスクロール バーの高さを制御します。
	//  - default: 既定のサイズ。
	//  - large: マウスでつかみやすいサイズに拡大する。
	"workbench.editor.titleScrollbarSizing": "default",

	// 無題のテキスト ヒントをエディターに表示するかどうかを制御します。
	"workbench.editor.untitled.hint": "text",

	// 無題のエディターのラベルの形式を制御します。
	//  - content: 無題ファイルの名前は、ファイル パスが関連付けられていない限り、最初の行の内容から導き出されます。行が空であるか、単語文字が含まれていない場合に、名前にフォールバックします。
	//  - name: 無題のファイルの名前は、ファイルの内容から派生していません。
	"workbench.editor.untitled.labelFormat": "content",

	// 使用可能なスペースを超えたときにタブを複数行に折り返すか、スクロール バーを表示するかどうかを制御します。`workbench.editor.showTabs` が無効な場合、この値は無視されます。
	"workbench.editor.wrapTabs": false,

	// glob パターンをエディターに構成します (`"*.hex": "hexEditor.hexEdit"` など)。これらは既定の動作よりも優先されます。
	"workbench.editorAssociations": {},

	// この設定は非推奨とされ、`workbench.cloudChanges.autoResume` が優先されます。
	// 
	"workbench.editSessions.autoResume": null,

	// この設定は非推奨とされ、`workbench.cloudChanges.continueOn` が優先されます。
	// 
	"workbench.editSessions.continueOn": null,

	// Microsoft のオンライン サービスから実行する実験を取得します。
	"workbench.enableExperiments": true,

	// 現在のワークスペースのクラウド内の使用可能な作業変更を自動的に保存するかどうかを制御します。
	//  - onShutdown: ウィンドウを閉じるときに、現在の作業変更をクラウドに自動的に保存します。
	//  - off: 作業変更をクラウドに自動的に保存しないでください。
	"workbench.experimental.cloudChanges.autoStore": "off",

	// 現在のセッションと部分的に一致するクラウドの変更を表示するかどうかを制御します。
	"workbench.experimental.cloudChanges.partialMatches.enabled": false,

	// この設定は非推奨とされ、`workbench.experimental.cloudChanges.autoStore` が優先されます。
	// 
	"workbench.experimental.editSessions.autoStore": null,

	// この設定は非推奨とされ、`workbench.experimental.cloudChanges.partialMatches.enabled` が優先されます。
	// 
	"workbench.experimental.editSessions.partialMatches.enabled": null,

	// プロファイル プレビュー機能を有効にするかどうかを制御します。
	"workbench.experimental.settingsProfiles.enabled": false,

	// 外部 URI (http、https) に使用する opener を構成します。
	"workbench.externalUriOpeners": {},

	// ワークベンチ項目にホバーが表示されるまでの待ち時間 (ミリ秒) を制御します (例: 拡張機能が用意されている一部のツリー ビュー項目)。既に表示されている項目では、この設定の変更を反映するために更新が必要な場合があります。
	"workbench.hover.delay": 500,

	// ワークベンチで使用されるファイル アイコン テーマを指定するか、ファイル アイコンを表示しないように 'null' を指定します。
	//  - null: ファイル アイコンがありません
	//  - vs-minimal
	//  - vs-seti
	"workbench.iconTheme": "vs-seti",

	// レイアウト コントロールをカスタム タイトル バーに表示するかどうかを制御します。この設定は、`window.titleBarStyle` が `custom` に設定されている場合にのみ有効です。
	"workbench.layoutControl.enabled": true,

	// カスタム タイトル バーのレイアウト コントロールを 1 つのメニュー ボタンとして表示するか、複数の UI の切り替えで表示するかを制御します。
	//  - menu: レイアウト オプションのドロップダウンを含む 1 つのボタンを表示します。
	//  - toggles: パネルとサイド バーの表示を切り替えるボタンをいくつか示します。
	//  - both: ドロップダウン ボタンとトグル ボタンの両方を表示します。
	"workbench.layoutControl.type": "both",

	// ワークベンチのリストとツリーの既定の検索モードを制御します。
	//  - highlight: 検索時に要素を強調表示します。さらに上下のナビゲーションでは、強調表示された要素のみがスキャンされます。
	//  - filter: 検索時に要素をフィルター処理します。
	"workbench.list.defaultFindMode": "highlight",

	// `Alt` を押すと、スクロール速度が倍増します。
	"workbench.list.fastScrollSensitivity": 5,

	// リストとツリーがワークベンチで水平スクロールをサポートするかどうかを制御します。警告: この設定をオンにすると、パフォーマンスに影響があります。
	"workbench.list.horizontalScrolling": false,

	// 代わりに 'workbench.list.defaultFindMode' を使用してください。
	// ワークベンチのリストおよびツリーのキーボード ナビゲーション スタイルを制御します。単純、強調表示、フィルターを指定できます。
	//  - simple: 簡単なキーボード ナビゲーションは、キーボード入力に一致する要素に焦点を当てます。一致処理はプレフィックスでのみ実行されます。
	//  - highlight: キーボード ナビゲーションの強調表示を使用すると、キーボード入力に一致する要素が強調表示されます。上および下への移動は、強調表示されている要素のみを移動します。
	//  - filter: キーボード ナビゲーションのフィルターでは、キーボード入力に一致しないすべての要素がフィルター処理され、非表示になります。
	"workbench.list.keyboardNavigation": "highlight",

	// マウス ホイール スクロール イベントの `deltaX` と `deltaY` で使用される乗数。
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// マウスを使用して項目を複数選択するときに使用する修飾キーです (たとえば、エクスプローラーでエディターと scm ビューを開くなど)。'横に並べて開く' マウス ジェスチャー (がサポートされている場合) は、複数選択の修飾キーと競合しないように調整されます。
	//  - ctrlCmd: Windows および Linux 上の `Control` キーと macOS 上の `Command` キーに割り当てます。
	//  - alt: Windows および Linux 上の `Alt` キーと macOS 上の `Option` キーに割り当てます。
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// マウスを使用して、ツリーとリスト内の項目を開く方法を制御します (サポートされている場合)。適用できない場合、一部のツリーやリストではこの設定が無視されることがあります。
	"workbench.list.openMode": "singleClick",

	// リストとツリーでスムーズ スクロールを使用するかどうかを制御します。
	"workbench.list.smoothScrolling": false,

	// ローカル ファイル履歴を有効にするかどうかを制御します。有効にすると、保存されたエディターのファイル コンテンツはバックアップの場所に保存され、後で復元または確認できます。この設定の変更は、既存のファイル履歴エントリには影響しません。
	"workbench.localHistory.enabled": true,

	// ローカル ファイル履歴からファイルを除外するための [glob パターン](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を構成します。この設定を変更しても、既存のローカル ファイル履歴エントリには影響しません。
	"workbench.localHistory.exclude": {},

	// ファイルごとのローカル ファイル履歴エントリの最大数を制御します。ローカル ファイル履歴エントリ数がファイルのこの値を超えると、最古のエントリが破棄されます。
	"workbench.localHistory.maxFileEntries": 50,

	// ローカル ファイル履歴向けのファイルの最大サイズ (KB 単位) を制御します。より大きなファイルは、ローカル ファイル履歴に追加されません。この設定の変更は、既存のファイル ファイル履歴エントリに影響しません。
	"workbench.localHistory.maxFileSize": 256,

	// ローカル ファイル履歴の最後のエントリが追加されるエントリに置き換えられる間隔を秒単位で構成します。これにより、自動保存が有効になっている場合など、追加されるエントリの総数を減らすことができます。この設定は、元のソースが同じエントリにのみ適用されます。この設定を変更しても、既存のローカル ファイル履歴エントリには影響しません。
	"workbench.localHistory.mergeWindow": 10,

	// 新しいワークスペース内のパネル (ターミナル、デバッグ コンソール、出力、問題) の既定の場所を制御します。エディター領域の下、右、または左に表示できます。
	"workbench.panel.defaultLocation": "bottom",

	// パネルを開くときに最大化するかどうかを制御します。開くときに必ず最大化するか、決して最大化しないか、最後に閉じたときの状態で開くかを選択できます。
	//  - always: 開くときにパネルを常に最大化します。
	//  - never: 開くときにパネルを決して最大化しません。パネルは最大化されずに開きます。
	//  - preserve: 閉じる前の状態でパネルを開きます。
	"workbench.panel.opensMaximized": "preserve",

	// `window.autoDetectColorScheme` が有効な場合に、ダークな OS の外観に適した色のテーマを指定します。
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// `window.autoDetectHighContrast` が有効な場合に、ハイ コントラスト ダーク モードで使われている中から、ご所望のカラー テーマを指定します。
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// `window.autoDetectHighContrast` が有効な場合に、ハイ コントラスト ライト モードで使われている中で、ご所望のカラー テーマを指定します。
	"workbench.preferredHighContrastLightColorTheme": "Default High Contrast Light",

	// `window.autoDetectColorScheme` が有効な場合に、ライトな OS の外観に適した色のテーマを指定します。
	"workbench.preferredLightColorTheme": "Default Light+",

	// 使用する製品アイコンのテーマを指定します。
	//  - Default: 既定
	"workbench.productIconTheme": "Default",

	// フォーカスを失ったときに Quick Open を自動的に閉じるかどうかを制御します。
	"workbench.quickOpen.closeOnFocusLost": true,

	// Quick Open を次回開いたとき、Quick Open の最後の入力を復元するかどうかを制御します。
	"workbench.quickOpen.preserveInput": false,

	// ワークベンチがレンダリングするアニメーション数を減少させるかどうかを制御します。
	//  - on: 常にモーションを削減してレンダリングする。
	//  - off: モーションを削減してレンダリングしない
	//  - auto: OS 構成に基づいて、モーションを削減してレンダリングします。
	"workbench.reduceMotion": "auto",

	// ビューまたはエディター間のドラッグ領域のホバー フィードバックの遅延をミリ秒単位で制御します。
	"workbench.sash.hoverDelay": 300,

	// ビューまたはエディター間にあるドラッグ領域のフィードバック領域のサイズをピクセル単位で制御します。マウスを使用してビューのサイズを変更するのが困難な場合は、これを大きな値に設定してください。
	"workbench.sash.size": 4,

	// 既定で使用する設定エディターを指定します。
	//  - ui: UI の設定エディターを使用します。
	//  - json: JSON ファイル エディターを使用します。
	"workbench.settings.editor": "ui",

	// 設定で自然文検索モードを有効にするかどうかを制御します。自然文検索はMicrosoft オンライン サービスによって提供されます。
	"workbench.settings.enableNaturalLanguageSearch": true,

	// キーバインド設定を開いたときに、すべての既定のキーバインド設定を表示するエディターも開くかどうかを制御します。
	"workbench.settings.openDefaultKeybindings": false,

	// 設定を開いたときに、すべての既定の設定を表示するエディターも開くかどうかを制御します。
	"workbench.settings.openDefaultSettings": false,

	// 検索中の設定エディターの目次の動作を制御します。
	//  - hide: 検索中の目次を非表示にします。
	//  - filter: 目次をフィルターして、一致している設定を持つカテゴリだけを表示します。カテゴリをクリックするとそのカテゴリに結果が絞り込まれます。
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// JSON として設定を編集するときに、split JSON エディターを使用するかどうかを制御します。
	"workbench.settings.useSplitJSON": false,

	// プライマリ サイド バーとアクティビティ バーの場所を制御します。ワークベンチの左側または右側に表示できます。2 番目のサイド バーはワークベンチの反対側に表示されます。
	"workbench.sideBar.location": "left",

	// 起動時にどのエディターを表示するかを制御します。無い場合、前のセッションを復元します。
	//  - none: エディターなしで開始
	//  - welcomePage: ウェルカム ページを開き、VS Codeと拡張機能を使って作業を開始するのに役立つコンテンツを表示します。
	//  - readme: README を含むフォルダーを開くときに README を開き、それ以外の場合は 'welcomePage' にフォールバックします。注意: これはグローバル構成として確認されました。これは、ワークスペースまたはフォルダー構成で設定されている場合は無視されます。
	//  - newUntitledFile: 無題の新規ファイルを開きます (空のウィンドウが開かれているときのみ)。
	//  - welcomePageInEmptyWorkbench: 空のワークベンチを開くとき、ウェルカム ページを開きます。
	"workbench.startupEditor": "welcomePage",

	// ワークベンチの下部にステータス バーを表示するかどうかを制御します。
	"workbench.statusBar.visible": true,

	// 有効にすると、エディターを 1 つも開いていないときに透かしのヒントが表示されます。
	"workbench.tips.enabled": true,

	// フォルダー名をクリックしたときにツリー フォルダーが展開される方法を制御します。適用できない場合、一部のツリーやリストではこの設定が無視されることがあります。
	"workbench.tree.expandMode": "singleClick",

	// ツリーのインデントをピクセル単位で制御します。
	"workbench.tree.indent": 8,

	// ツリーでインデントのガイドを表示するかどうかを制御します。
	"workbench.tree.renderIndentGuides": "onHover",

	// 有効にすると、信頼されたワークスペースでリンクを開いたときに信頼されたドメインのプロンプトが表示されます。
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// ビュー ヘッダー アクションを表示するかどうかを制御します。ビュー ヘッダー アクションは常に表示されるか、パネルをフォーカスやホバーしたときのみ表示のいずれかです。
	"workbench.view.alwaysShowHeaderActions": false,

	// 有効にすると、[始めよう] のページにビデオ チュートリアルへの追加のリンクが表示されます。
	"workbench.welcomePage.experimental.videoTutorials": "off",

	// 非推奨です。グローバル `workbench.reduceMotion` を使用してください。
	// 有効にした場合、ウェルカム ページでの動作を減らします。
	"workbench.welcomePage.preferReducedMotion": false,

	// 有効にすると、拡張機能のインストール時に拡張機能のチュートリアルが開きます。
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// 設定すると、OS の外観に基づいて好みのカラー テーマに自動的に切り替わります。OS の外観がダーク テーマの場合、`workbench.preferredDarkColorTheme#` で指定されたテーマが使われ、ライト テーマの場合には `#workbench.preferredLightColorTheme`で指定されたテーマが使われます。
	"window.autoDetectColorScheme": false,

	// 有効にすると、OS でハイ コントラスト テーマが使用されている場合にはハイ コントラスト テーマに自動的に変更されます。使用するハイ コントラスト テーマは `workbench.preferredHighContrastColorTheme#` と `#workbench.preferredHighContrastLightColorTheme` で指定されます。
	"window.autoDetectHighContrast": true,

	// 最後のエディターを閉じたときに、ウィンドウも閉じるかどうかを制御します。この設定はフォルダーを表示していないウィンドウにのみ適用されます。
	"window.closeWhenEmpty": false,

	// コマンド ランチャーをウィンドウ タイトルと共に表示します。この設定は、`window.titleBarStyle` が `custom` に設定されている場合にのみ有効です。
	"window.commandCenter": false,

	// ウィンドウを閉じる前またはアプリケーションを終了する前に確認ダイアログを表示するかどうかを制御します。
	//  - always: 常に確認メッセージを表示します。
	//  - keyboardOnly: キー バインドが使用された場合にのみ確認を求めます。
	//  - never: 明示的に確認を求めることはありません。
	"window.confirmBeforeClose": "never",

	// Alt キーを押してメニュー バーにフォーカスするかどうかを制御します。この設定は、Alt キーを使用してメニュー バーを切り替える操作には影響しません。
	"window.customMenuBarAltFocus": true,

	// ダイアログ ウィンドウの外観を調整します。
	"window.dialogStyle": "native",

	// 有効になっている場合、タイトル バーでアプリケーション アイコンをクリックするとウィンドウが閉じ、ウィンドウをアイコンでドラッグすることができません。この設定が有効になるのは、`window.titleBarStyle` が `custom` に設定されている場合のみです。
	"window.doubleClickIconToClose": false,

	// Alt キー ショートカットを使用してメイン メニューを開くことができるかどうかを制御します。ニーモニックを無効にすると、これらの Alt キー ショートカットを代わりにエディター コマンドにバインドできます。
	"window.enableMenuBarMnemonics": true,

	// 試験的: 有効にすると、ウィンドウで Electron API を使用してサンドボックス モードが有効になります。
	"window.experimental.useSandbox": false,

	// HTML ベースのウィンドウ コントロールではなく、プラットフォームによって提供されるウィンドウ コントロールを使用します。変更を適用するには、完全な再起動が必要です。
	"window.experimental.windowControlsOverlay.enabled": true,

	// メニュー バーの表示と非表示を制御します。'切り替え' 設定は Alt キーを 1 回押すとメニュー バーの表示と非表示が切り替わることを意味します。'コンパクト' 設定では、メニューがサイド バーに移動します。
	//  - classic: メニューはウィンドウの上部に表示され、全画面表示モードでのみ非表示になります。
	//  - visible: メニューは、全画面表示モードの場合でも、常にウィンドウの上部に表示されます。
	//  - toggle: メニューは非表示になっていますが、Alt キーを使用してウィンドウの上部に表示できます。
	//  - hidden: メニューは常に非表示です。
	//  - compact: メニューは、サイド バーにコンパクト ボタンとして表示されます。`window.titleBarStyle` が `native` の場合、この値は無視されます。
	"window.menuBarVisibility": "classic",

	// 既に 1 つ以上のウィンドウを開いているとき、新しく開くウィンドウのサイズを制御します。この設定は、最初に開いたウィンドウに適用されないことに注意してください。最初のウィンドウは常に、前回閉じたサイズと位置で復元します。
	//  - default: 新しいウィンドウを画面の中央に開きます。
	//  - inherit: 新しいウィンドウを、最後にアクティブだったウィンドウと同じサイズで開きます。
	//  - offset: 最後のアクティブなウィンドウと同じ寸法の新しいウィンドウをオフセット位置で開きます。
	//  - maximized: 新しいウィンドウを最大化した状態で開きます。
	//  - fullscreen: 新しいウィンドウを全画面表示モードで開きます。
	"window.newWindowDimensions": "default",

	// コマンド ラインまたはファイル ダイアログを使用しているときに、ファイルを新規ウィンドウで開くかどうかを制御します。
	// 注、この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用した場合など)。
	//  - on: 新しいウィンドウでファイルを開きます。
	//  - off: ファイルのフォルダーを開いているウィンドウまたは最後のアクティブ ウィンドウでファイルを開きます。
	//  - default: アプリケーション内から選択したとき (例: ファイル メニュー介したとき) を除き、新しいウィンドウでファイルを開きます。
	"window.openFilesInNewWindow": "off",

	// フォルダーを新しいウィンドウで開くか、最後のアクティブ ウィンドウで開くかどうかを制御します。
	// この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用する場合など)。
	//  - on: フォルダーを新しいウィンドウで開きます。
	//  - off: フォルダーを最後のアクティブ ウィンドウで開きます。
	//  - default: フォルダーがアプリケーション内から (たとえば、[ファイル] メニューから) 選択された場合を除いて、新しいウィンドウでフォルダーを開きます。
	"window.openFoldersInNewWindow": "default",

	// 引数なしで 2 つ目のインスタンスを起動するとき、新しい空のウィンドウを開くか、最後に実行されていたウィンドウにフォーカスするかどうかを制御します。
	// この設定は無視される場合もあります (例: `--new-window` または `--reuse-window` コマンド ライン オプションを使用する場合など)。
	//  - on: 新しい空のウィンドウを開きます。
	//  - off: 最後にアクティブだった実行中のインスタンスにフォーカスします。
	"window.openWithoutArgumentsInNewWindow": "on",

	// 全画面表示モードで終了した場合に、ウィンドウを全画面表示モードに復元するかどうかを制御します。
	"window.restoreFullscreen": false,

	// 初めての起動後にウィンドウを再度開く方法を制御します。この設定は、アプリケーションが既に実行中の場合は効果がありません。
	//  - preserve: 常にすべてのウィンドウが再度開かれます。フォルダーまたはワークスペースが開かれている場合は (例: コマンド ラインから)、新しいウィンドウとして開かれます (ただし、前に開かれている場合は例外)。ファイルが開かれている場合、それらは復元されたウィンドウのうちの 1 つで開かれます。
	//  - all: フォルダー、ワークスペース、ファイルが (コマンド ラインなどから) 開かれている場合を除き、すべてのウィンドウを再度開きます。
	//  - folders: フォルダー、ワークスペース、ファイルが (コマンド ラインなどから) 開かれている場合を除き、フォルダーまたはワークスペースが開かれていたすべてのウィンドウを再度開きます。
	//  - one: フォルダー、ワークスペース、ファイルが (コマンド ラインなどから) 開かれている場合を除き、最後のアクティブ ウィンドウを再度開きます。
	//  - none: ウィンドウを再度開きません。フォルダーまたはワークスペースが (コマンド ラインなどから) 開かれている場合を除き、空のウィンドウが表示されます。
	"window.restoreWindows": "all",

	// アクティブなエディターに基づいてウィンドウのタイトルを制御します。変数はコンテキストに基づいて置き換えられます:
	// - '${activeEditorShort}': ファイル名 (例: myFile.txt)。
	// - `${activeEditorMedium}`: ワークスペース フォルダーに対して相対的なファイルのパス (例: myFolder/myFileFolder/myFile.txt)。
	// - `${activeEditorLong}`: ファイルの完全なパス (例: /Users/Development/myFolder/myFileFolder/myFile.txt)。
	// - `${activeFolderShort}`: ファイルが含まれているフォルダーの名前 (例: myFileFolder)。
	// - `${activeFolderMedium}`: ファイルを含むフォルダーの、ワークスペースフォルダーからの相対パス(例: myFolder/myFileFolder)。
	// - '${activeFolderLong}': ファイルが格納されているフォルダーのフルパス (例: /Users/Development/myFolder/myFileFolder)。
	// - ${folderName}`: ファイルが含まれているワークスペース フォルダーの名前 (例: myFolder)。
	// - `${folderPath}`: ファイルが含まれているワークスペースの絶対パスです (例: /Users/Development/myFolder)。
	// - `${rootName}`: 開かれたワークスペースまたはフォルダーの名前 (例: myFolder または myWorkspace)。
	// - `${rootPath}`: 開かれたワークスペースまたはフォルダーのファイル パス (例: /Users/Development/myWorkspace)。
	// - `${appName}`: 例: VS Code。
	// - `${remoteName}`: 例: SSH
	// - `${dirty}`: アクティブなエディターの変更が保存されていない場合を示すインジケーター。
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (" - ") を表示します。
	"window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

	// ウィンドウのタイトル バーの外観を調整します。Linux と Windows では、この設定はアプリケーションとコンテキスト メニューの外観にも影響します。変更を適用するには完全な再起動が必要です。
	"window.titleBarStyle": "custom",

	// `window.title` で使用される区切り記号。
	"window.titleSeparator": " - ",

	// ウィンドウのズーム レベルを調整します。元のサイズは 0 で、1 つ上げるごとに (1 など) 20% ずつ拡大することを表し、1 つ下げるごとに (-1 など) 20% ずつ縮小することを表します。小数点以下の桁数を入力して、さらに細かくズーム レベルを調整することもできます。
	"window.zoomLevel": 0,

	// Zen Mode をオンにしたときに、レイアウトを中央寄せにするかどうかを制御します。
	"zenMode.centerLayout": true,

	// Zen Mode をオンにしたときに、ワークベンチを自動的に全画面モードに切り替えるかどうかを制御します。
	"zenMode.fullScreen": true,

	// Zen Mode をオンにしたときに、ワークベンチの左側または右側のいずれかにあるアクティビティ バーを非表示にするかどうかを制御します。
	"zenMode.hideActivityBar": true,

	// Zen Mode をオンにしたときにエディターの行番号も非表示にするかどうかを制御します。
	"zenMode.hideLineNumbers": true,

	// Zen Mode をオンにするとワークベンチの下部にあるステータス バーを非表示にするかどうかを制御します。
	"zenMode.hideStatusBar": true,

	// Zen Mode をオンにしたときにワークベンチ タブも非表示にするかどうかを制御します。
	"zenMode.hideTabs": true,

	// Zen Mode で終了したウィンドウを Zen Mode に復元するかどうかを制御します。
	"zenMode.restore": true,

	// Zen Mode の間に通知の応答不可モードを有効にするかどうかを制御します。true の場合は、エラー通知のみが表示されます。
	"zenMode.silentNotifications": true,

	// スクリーンキャスト モードのキーボードのフォント サイズ (ピクセル) を制御します。
	"screencastMode.fontSize": 56,

	// キーボード オーバーレイをスクリーンキャスト モードで表示する時間 (ミリ秒単位) を制御します。
	"screencastMode.keyboardOverlayTimeout": 800,

	// ショートカットを表示するときにキーボード オーバーレイに表示される内容を制御します。
	//  - keys: キー。
	//  - command: コマンド タイトル。
	//  - commandWithGroup: コマンド タイトルには、そのグループのプレフィックスが付いています。
	//  - commandAndKeys: コマンドのタイトルとキー。
	//  - commandWithGroupAndKeys: コマンドのタイトルとキー。コマンドの前にグループが付きます。
	"screencastMode.keyboardShortcutsFormat": "commandAndKeys",

	// スクリーンキャスト モードでマウス インジケーターの色を 16 進数 (#RGB、#RGBA、#RRGGBB、#RRGGBBAA) で制御します。
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// スクリーンキャスト モードのマウス インジケーターのサイズ (ピクセル単位) を制御します。
	"screencastMode.mouseIndicatorSize": 20,

	// スクリーンキャスト モードでのみキーボード ショートカットを表示します。
	"screencastMode.onlyKeyboardShortcuts": false,

	// スクリーンキャスト モードの縦方向のオフセットをワークベンチの高さのパーセンテージとして下部からオーバーレイするかどうかを制御します。
	"screencastMode.verticalOffset": 20,

	// 言語に対するファイルの関連付け (例: `"*.extension": "html") を構成します。これらの関連付けは、インストールされている言語の既定の関連付けより優先されます。
	"files.associations": {},

	// 有効にすると、エディターはファイルを開くときに文字セットのエンコードを推測しようとします。この設定は、言語ごとに構成することもできます。この設定はテキスト検索では考慮されません。`files.encoding` のみが考慮されます。
	"files.autoGuessEncoding": false,

	// 変更が保存されていないエディターの [自動保存](https://code.visualstudio.com/docs/editor/codebasics#_save 自動保存) を制御します。
	//  - off: 変更のあったエディターは自動的に保存されません。
	//  - afterDelay: 変更のあったエディターは、構成された '#files.autoSaveDelay#' の後に自動的に保存されます。
	//  - onFocusChange: エディターがフォーカスを失うと、変更のあったエディターが自動的に保存されます。
	//  - onWindowChange: エディターがフォーカスを失うと、変更のあったウィンドウが自動的に保存されます。
	"files.autoSave": "off",

	// 変更が保存されていないエディターが自動で保存されるまでの遅延をミリ秒単位で制御します。`files.autoSave` が `afterDelay` に設定されている場合のみ適用されます。
	"files.autoSaveDelay": 1000,

	// 新しいファイルに割り当てられる既定の言語識別子。`${activeEditorLanguage}` に構成されている場合は、現在アクティブなテキスト エディターの言語識別子 (存在する場合) が使用されます。
	"files.defaultLanguage": "",

	// ファイル/フォルダーを削除時するときに、 OS のごみ箱に移動します。無効にするとファイル/フォルダーは完全に削除されます。
	"files.enableTrash": true,

	// ファイルの読み取り/書き込みで使用する既定の文字セット エンコーディング。言語ごとに構成することも可能です。
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// 既定の改行文字。
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: OS 固有の改行文字を使用します。
	"files.eol": "auto",

	// ファイルとフォルダーを除外するための [glob パターン](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を構成します。たとえば、エクスプローラーでは、この設定に基づいて表示または非表示にするファイルとフォルダーを決定します。検索固有の除外を定義するには、`search.exclude#` 設定を参照してください。`.gitignore` に基づいてファイルを無視するには、`#explorer.excludeGitIgnore` 設定を参照してください。
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// エディターを終了するときに保存を確認するダイアログを省略し、保存されていないファイルをセッション後も保持するかどうかを制御します。
	//  - off: Hot Exit を無効にします。変更が保存されていないエディターを含むウィンドウを閉じようとすると、プロンプトが表示されます。
	//  - onExit: Windows または Linux で最後のウィンドウが閉じられるとき、または `workbench.action.quit` コマンドがトリガーされるとき (コマンド パレット、キー バインド、メニュー)、Hot Exit がトリガーされます。フォルダーが開かれていないウィンドウはすべて、次回の起動時に復元されます。未保存のファイルが含まれる、以前に開かれたウィンドウのリストは、[ファイル] > [最近使用したファイル] > [詳細...] と移動すると表示できます。
	//  - onExitAndWindowClose: Windows または Linux で最後のウィンドウが閉じられるとき、または `workbench.action.quit` コマンドがトリガーされるとき (コマンド パレット、キー バインド、メニュー)、またフォルダーが開かれているウィンドウについても、それが最後のウィンドウかどうかに関係なく、Hot Exit がトリガーされます。フォルダーが開かれていないウィンドウはすべて、次回の起動時に復元されます。未保存のファイルが含まれる、以前に開かれたウィンドウのリストは、[ファイル] > [最近使用したファイル] > [詳細...] と移動すると表示できます。
	"files.hotExit": "onExit",

	// 有効にすると、ファイルの保存時に最新の行を末尾に挿入します。
	"files.insertFinalNewline": false,

	// 大きなファイルを開こうとしたとき、VS Code の再起動後に使用できるメモリを制御します。コマンド ラインで `--max-memory=NEWSIZE` を指定するのと同じ効果があります。
	"files.maxMemoryForLargeFilesMB": 4096,

	// 作成、名前変更、削除のファイル参加者が取り消されるまでのタイムアウト (ミリ秒)。参加者を無効にするには、'0' を使用します。
	"files.participants.timeout": 60000,

	// リファクタリングの一部であったファイルを自動的に保存するかどうかを制御します
	"files.refactoring.autoSave": true,

	// ファイルを再度開いたときに、元に戻す機能のスタックを復元します。
	"files.restoreUndoStack": true,

	// 保存の競合は、ファイルを保存している間に別のプログラムによって変更されたときに発生する可能性があります。データ損失を防ぐために、ユーザーは、エディターの変更とディスク上のバージョンを比較するように求められます。この設定は、保存の競合エラーが頻繁に発生する場合にのみ変更し、データが失われる可能性があるため注意してください。
	//  - askUser: 保存を拒否し、保存の競合を手動で解決するように要求します。
	//  - overwriteFileOnDisk: エディターでの変更を使用してディスク上のファイルを上書きすることで、保存の競合を解決します。
	"files.saveConflictResolution": "askUser",

	// 単純なファイル ダイアログを有効にします。有効な場合、単純なファイル ダイアログはシステム ファイル ダイアログを置き換えます。
	"files.simpleDialog.enable": false,

	// 有効にすると、ファイルの保存時に最終行以降の新しい行をトリミングします。
	"files.trimFinalNewlines": false,

	// 有効にすると、ファイルの保存時に末尾の空白をトリミングします。
	"files.trimTrailingWhitespace": false,

	// ファイル監視から除外するパスまたは glob パターンを構成します。相対パスまたは基本的な glob パターン (例: 'build/output' または `*.js`) は、現在開いているワークスペースを使用して絶対パスに解決されます。複雑な glob パターンは、プロパティと一致させる (例: `**/build/output/**` や `/Users/name/workspaces/project/build/output/**`) ために絶対パスと一致しなければなりません (例: パス内のプレフィックスに '**/' を付けるか、完全なパスとサフィックスに '/**' を付ける)。ファイル監視プロセスが CPU を大量に消費する場合は、関心の低い大きなフォルダー (ビルド出力フォルダーなど) を除外してください。
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// 追加のパスを構成して、ワークスペース内の変更を監視します。既定では、シンボリック リンクのフォルダーを除き、すべてのワークスペースのフォルダーを再帰的に監視します。絶対パスまたは相対パスを明示的に追加して、シンボリック リンクのフォルダーの監視をサポートすることができます。相対パスは、現在開いているワークスペースを使用して絶対パスに解決されます。
	"files.watcherInclude": [],

	// エクスプローラーでファイルを開くとき、自動的にファイルの内容を表示して選択するかどうかを制御します。
	//  - true: ファイルは、表示や選択が行われるようになります。
	//  - false: ファイルは、表示や選択が行われません。
	//  - focusNoScroll: ファイルは、スクロールしてビューに表示されることはありませんが、引き続きフォーカスされます。
	"explorer.autoReveal": true,

	// ファイルとフォルダーを開いたときにエクスプローラーで表示および選択されないように、ファイルとフォルダーを除外するための glob パターンを構成します。glob パターンの詳細については、[こちら](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を参照してください。
	"explorer.autoRevealExclude": {
		"**/node_modules": true,
		"**/bower_components": true
	},

	// エクスプローラーでフォルダーをコンパクト形式でレンダリングするかどうかを制御します。このような形式では、単一の子フォルダーは結合されたツリー要素に圧縮されます。たとえば、Java パッケージ構造に役立ちます。
	"explorer.compactFolders": true,

	// ごみ箱を経由したファイル削除時にエクスプローラーが確認を求めるかどうかを制御します。
	"explorer.confirmDelete": true,

	// ドラッグ アンド ドロップを使用したファイルやフォルダーの移動時にエクスプローラーが確認を求めるかどうかを制御します。
	"explorer.confirmDragAndDrop": true,

	// 元に戻すときにエクスプローラーで確認を求めるかどうかを制御します。
	//  - verbose: 元に戻す操作の前には必ず、エクスプローラーでプロンプトが表示されます。
	//  - default: エクスプローラーでは、破壊的な元に戻す操作の前にプロンプトが表示されます。
	//  - light: エクスプローラーでは、フォーカスがあるときに元に戻す操作の前にプロンプトは表示されません。
	"explorer.confirmUndo": "default",

	// 相対ファイル パスをコピーする場合に使用するパス区切り文字です。
	//  - /: スラッシュをパス区切り文字として使用します。
	//  - \: 円記号をパス区切り文字として使用します。
	//  - auto: オペレーティング システムの特定のパス区切り文字を使用します。
	"explorer.copyRelativePathSeparator": "auto",

	// ファイルの装飾にバッジを使用するかどうかを制御します。
	"explorer.decorations.badges": true,

	// ファイルの装飾に配色を使用するかどうかを制御します。
	"explorer.decorations.colors": true,

	// ドラッグ アンド ドロップによるファイルとフォルダーの移動をエクスプローラーで許可するかどうかを制御します。この設定は、エクスプローラー内からのドラッグ アンド ドロップのみに影響します。
	"explorer.enableDragAndDrop": true,

	// エクスプローラーでファイルとフォルダーの元に戻す操作をサポートするかどうかを制御します。
	"explorer.enableUndo": true,

	// .gitignore 内のエントリを解析し、エクスプローラーから除外するかどうかを制御します。`files.exclude` に似ています。
	"explorer.excludeGitIgnore": false,

	// 初期化中に 1 つのフォルダーのみを含むマルチルート ワークスペースをエクスプローラーで展開するかどうかを制御します
	"explorer.expandSingleFolderWorkspaces": true,

	// エクスプローラーでファイルの入れ子を有効にするかどうかを制御します。ファイルの入れ子を使用すると、ディレクトリ内の関連ファイルを 1 つの親ファイルの下に視覚的にグループ化できます。
	"explorer.fileNesting.enabled": false,

	// ファイルの入れ子を自動的に展開するかどうかを制御します。これを有効にするためには、`explorer.fileNesting.enabled` を設定する必要があります。
	"explorer.fileNesting.expand": true,

	// エクスプローラー内のファイルの入れ子を制御します。この機能を有効にするには、`explorer.fileNesting.enabled` を設定する必要があります。各__Item__は親パターンを表し、任意の文字列に一致する 1 つの `*` 文字を含む場合があります。各__Value__は、指定された親の下に入れ子になっている子パターンのコンマ区切りの一覧を表します。子パターンには、いくつかの特別なトークンが含まれている可能性があります:
	// - `$(capture)`: 親パターンの `*` の解決された値と一致します
	// - `${basename}`: 親ファイルのベース名 、`file.ts` の `file` と一致します
	// - `${extname}`: 親ファイルの拡張子 、`file.ts` の `ts` と一致します
	// - `${dirname}`: 親ファイルのディレクトリ名 、`src/file.ts` の `src` と一致します
	// - `*`: 任意の文字列に一致します。子パターンごとに 1 回のみ使用できます
	"explorer.fileNesting.patterns": {
		"*.ts": "${capture}.js",
		"*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
		"*.jsx": "${capture}.js",
		"*.tsx": "${capture}.ts",
		"tsconfig.json": "tsconfig.*.json",
		"package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
	},

	// 貼り付けで重複するエクスプローラー項目に新しい名前を付けるときに使用する名前付け規則を制御します。
	//  - simple: 後ろに数字が付いている可能性のある、重複している名前の末尾に「copy」という語を追加します。
	//  - smart: 重複した名前の末端に数字を追加します。名前の一部に既に数字が含まれている場合、その数字を増やしてみます。
	//  - disabled: 名前の増分作成を無効にします。同じ名前のファイルが 2 つ存在する場合は、既存のファイルを上書きするよう要求されます。
	"explorer.incrementalNaming": "simple",

	// [エディターを開く] ペインに表示されるエディター スロットの最小数。0 に設定すると、[エディターを開く] ペインは、エディターの数に基づいて動的にサイズ変更されます。
	"explorer.openEditors.minVisible": 0,

	// [開いているエディター] ペイン内のエディターの並べ替え順序を制御します。
	//  - editorOrder: エディターは、エディターのタブが表示されているのと同じ順序で並べ替えられています。
	//  - alphabetical: エディターは、各エディター グループ内のタブ名でアルファベット順に並べ替えられます。
	//  - fullPath: エディターは、各エディター グループ内の完全なパスでアルファベット順に並べ替えられます。
	"explorer.openEditors.sortOrder": "editorOrder",

	// [開いているエディター] ペインに表示されるエディターの数。これを 0 に設定すると、[開いているエディター] ペインが非表示になります。
	"explorer.openEditors.visible": 9,

	// エクスプローラーでのファイルとフォルダーのプロパティベースの並べ替えを制御します。`explorer.fileNesting.enabled` が有効になっている場合は、入れ子になったファイルの並べ替えも制御します。
	//  - default: ファイルとフォルダーを名前で並び替えます。フォルダーはファイルの前に表示されます。
	//  - mixed: ファイルとフォルダーをアルファベット順に名前で並び替えます。ファイルはフォルダーと混交して表示されます。
	//  - filesFirst: ファイルとフォルダーを名前で並び替えます。ファイルはフォルダーの前に表示されます。
	//  - type: ファイルとフォルダーを拡張子の種類でグループ化して名前で並び替えます。フォルダーはファイルの前に表示されます。
	//  - modified: ファイルとフォルダーを降順に最終更新日で並び替えます。フォルダーはファイルの前に表示されます。
	//  - foldersNestsFiles: ファイルとフォルダーは名前で並べ替えられます。フォルダーはファイルの前に表示されます。子が入れ子になったファイルは、他のファイルの前に表示されます。
	"explorer.sortOrder": "default",

	// エクスプローラーでのファイル名とフォルダー名の辞書順並べ替えを制御します。
	//  - default: 大文字の名前と小文字の名前が混在しています。
	//  - upper: 大文字の名前は、小文字の名前の前にまとめてグループ化されます。
	//  - lower: 小文字の名前は、大文字の名前の前にまとめてグループ化されます。
	//  - unicode: 名前は、Unicode 順に並べ替えられます。
	"explorer.sortOrderLexicographicOptions": "default",

	// 検索ビューの行内のアクションバーの位置を制御します。
	//  - auto: 検索ビューが狭い場合はアクションバーを右に、検索ビューが広い場合はコンテンツの直後にアクションバーを配置します。
	//  - right: アクションバーを常に右側に表示します。
	"search.actionsPosition": "right",

	// 検索結果を折りたたむか展開するかどうかを制御します。
	//  - auto: 結果が 10 件未満のファイルが展開されます。他のファイルは折りたたまれます。
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// 検索ファイルの装飾にバッジを使用するかどうかを制御します。
	"search.decorations.badges": true,

	// 検索ファイルの装飾に色を使用するかどうかを制御します。
	"search.decorations.colors": true,

	// 既定の検索結果ビュー モードを制御します。
	//  - tree: 検索結果をツリーとして表示します。
	//  - list: 検索結果をリストとして表示します。
	"search.defaultViewMode": "list",

	// フルテキスト検索と Quick Open でファイルとフォルダーを除外するための [glob パターン](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) を構成します。`files.exclude` 設定からすべての glob パターンを継承します。
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// 検索中にシンボリック リンクをたどるかどうかを制御します。
	"search.followSymlinks": true,

	// 検索キャッシュは、シャットダウンしない拡張機能ホストに保持されるため、この設定は不要になります。
	// 有効にすると、searchService プロセスは 1 時間操作がない場合でもシャットダウンされず、アクティブな状態に保たれます。これにより、ファイル検索キャッシュがメモリに保持されます。
	"search.maintainFileSearchCache": false,

	// 検索結果の最大数を制御します。これを ' null ' (空) に設定して、無制限の結果を返すことができます。
	"search.maxResults": 20000,

	// [検索: フォルダーを指定して検索] と [フォルダー内を検索] の新しい操作が実行される場所を制御します。検索ビューまたは検索エディターのいずれかになります。
	//  - view: パネルまたはサイド バーのいずれかで検索ビュー内を検索します。
	//  - reuseEditor: 存在する場合は既存の検索エディターで、それ以外の場合は新しい検索エディターで検索します。
	//  - newEditor: 新しい検索エディターで検索します。
	"search.mode": "view",

	// フィルター処理時に、 Quick Open におけるエディター履歴の並べ替え順序を制御します。
	//  - default: 履歴エントリは、使用されるフィルター値に基づいて関連性によって並び替えられます。関連性の高いエントリが最初に表示されます。
	//  - recency: 履歴エントリは、新しい順に並べ替えられます。最近開いたエントリが最初に表示されます。
	"search.quickOpen.history.filterSortOrder": "default",

	// 最近開いたファイルの結果を、Quick Open の結果ファイルに含めるかどうか。
	"search.quickOpen.includeHistory": true,

	// グローバル シンボル検索の結果を、Quick Open の結果ファイルに含めるかどうか。
	"search.quickOpen.includeSymbols": false,

	// 新しい検索エディターを作成するときに使用する、前後のコンテキスト行の既定数です。'#search.searchEditor.reusePriorSearchConfiguration#' を使用している場合、検索エディターの以前の構成を使用するには、これを 'null ' (空) に設定することができます。
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// 検索エディターで結果をダブル クリックした場合の効果を構成します。
	//  - selectWord: ダブルクリックすると、カーソルの下にある単語が選択されます。
	//  - goToLocation: ダブルクリックすると、アクティブなエディター グループに結果が開きます。
	//  - openLocationToSide: ダブルクリックすると、結果はエディター グループの横に開かれ、まだ存在しない場合は作成されます。
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// 有効にすると、新しい検索エディターで、以前に開かれていた検索エディターの包含、除外、フラグが再利用されます。
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// 入力中の文字列を全てのファイルから検索する。
	"search.searchOnType": true,

	// `search.searchOnType#` が有効になっている場合、文字入力と検索開始の間の入力待ちをミリ秒単位で制御します。`#search.searchOnType` が無効になっている場合、効果はありません。
	"search.searchOnTypeDebouncePeriod": 300,

	// 検索ビューにフォーカスを置いたときに、検索クエリが、エディターで選択されているテキストに更新されます。これは、クリックされたときか、`workbench.views.search.focus` コマンドがトリガーされたときに発生します。
	"search.seedOnFocus": false,

	// アクティブなエディターで何も選択されていないときに、カーソルに最も近い語からのシード検索を有効にします。
	"search.seedWithNearestWord": false,

	// 検索結果に行番号を表示するかどうかを制御します。
	"search.showLineNumbers": false,

	// すべて小文字のパターンの場合、大文字と小文字を区別しないで検索し、そうでない場合は大文字と小文字を区別して検索します。
	"search.smartCase": false,

	// 検索結果の並べ替え順序を制御します。
	//  - default: 結果はフォルダー名とファイル名でアルファベット順に並べ替えられます。
	//  - fileNames: 結果はフォルダーの順序を無視したファイル名でアルファベット順に並べ替えられます。
	//  - type: 結果は、ファイル拡張子でアルファベット順に並べ替えられます。
	//  - modified: 結果は、ファイルの最終更新日で降順に並べ替えられます。
	//  - countDescending: 結果は、ファイルあたりの数で降順に並べ替えられます。
	//  - countAscending: 結果は、ファイルごとのカウントで昇順に並べ替えられます。
	"search.sortOrder": "default",

	// ファイルを検索するときに、グローバルの `.gitignore` と `.ignore` ファイルを使用するかどうかを制御します。`search.useIgnoreFiles` を有効にする必要があります。
	"search.useGlobalIgnoreFiles": false,

	// ファイルを検索するときに、`.gitignore` ファイルと `.ignore` ファイルを使用するかどうかを制御します。
	"search.useIgnoreFiles": true,

	// ファイルを検索するときに、親ディレクトリで `.gitignore` ファイルと `.ignore` ファイルを使用するかどうかを制御します。`search.useIgnoreFiles` を有効にする必要があります。
	"search.useParentIgnoreFiles": false,

	// 廃止されました。PCRE2 でのみサポートされている正規表現機能を使用すると、PCRE2 が自動的に使用されます。
	// テキスト検索に PCRE2 正規表現エンジンを使用するかどうか。これにより、先読みや後方参照といった高度な正規表現機能を使用できるようになります。ただし、すべての PCRE2 機能がサポートされているわけではありません。JavaScript によってサポートされる機能のみが使用できます。
	"search.usePCRE2": false,

	// 一致項目を選択するか置換するときに、置換のプレビューを開くかどうかを制御します。
	"search.useReplacePreview": true,

	// 推奨されません。高度な正規表現機能サポートのために "search.usePCRE2" の利用を検討してください。
	// この設定は推奨されず、現在 "search.usePCRE2" にフォール バックします。
	"search.useRipgrep": true,

	// 使用するプロキシ設定。設定されていない場合は、'http_proxy' および 'https_proxy' の環境変数から継承されます。
	"http.proxy": "",

	// すべてのネットワーク要求に対して 'Proxy-Authorization' ヘッダーとして送信する値。
	"http.proxyAuthorization": null,

	// 提供された CA の一覧と照らしてプロキシ サーバーの証明書を確認するかどうか制御します。
	"http.proxyStrictSSL": true,

	// 拡張機能プロキシ サポートを使用します。
	//  - off: 拡張機能のプロキシ サポートを無効にします。
	//  - on: 拡張機能のプロキシ サポートを有効にします。
	//  - fallback: プロキシが見つからないときに、拡張機能のプロキシ サポートを有効にし、要求オプションにフォールバックします。
	//  - override: 拡張機能のプロキシ サポートを有効にします。リクエスト オプションを上書きします。
	"http.proxySupport": "override",

	// CA 証明書を OS から読み込む必要があるかどうかを制御します (Windows および macOS では、オフにした場合にウィンドウの再読み込みが必要です)。
	"http.systemCertificates": true,

	// この設定は非推奨になりました。代わりに 'update.mode' を使用してください。
	// 自動更新を受け取るかどうかを構成します。変更後に再起動が必要です。更新プログラムは Microsoft のオンライン サービスから取得されます。
	"update.channel": "default",

	// Windows で新しい VS Code バージョンをバックグラウンドでダウンロードしてインストールできるようにします。
	"update.enableWindowsBackgroundUpdates": true,

	// 自動更新を受け取るかどうかを構成します。変更後に再起動が必要です。更新プログラムは Microsoft のオンライン サービスから取得されます。
	//  - none: 更新を無効にします。
	//  - manual: バックグラウンドでの自動更新の確認を無効にします。更新を手動で確認すると、更新を利用できます。
	//  - start: 起動時にのみ更新プログラムを確認します。バックグラウンドの自動更新チェックを無効にします。
	//  - default: 自動更新の確認を有効にします。Code は自動的かつ定期的に更新を確認します。
	"update.mode": "default",

	// 更新後にリリース ノートを表示します。リリース ノートは Micorosft のオンライン サービスから取得されます。
	"update.showReleaseNotes": true,

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// Enable/disable auto creation of quotes for HTML attribute assignment. The type of quotes can be configured by `html.completion.attributeDefaultValue`.
	"html.autoCreateQuotes": true,

	// Controls the default value for attributes when completion is accepted.
	//  - doublequotes: Attribute value is set to "".
	//  - singlequotes: Attribute value is set to ''.
	//  - empty: Attribute value is not set.
	"html.completion.attributeDefaultValue": "doublequotes",

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to 'aligned'.
	"html.format.wrapAttributesIndentSize": null,

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,

	// Show references to MDN in hover.
	"html.hover.references": true,

	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,

	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,

	// Enable/disable default JSON formatter
	"json.format.enable": true,

	// Keep all existing new lines when formatting.
	"json.format.keepLines": false,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"json.maxItemsComputed": 5000,

	// When enabled, JSON schemas can be fetched from http and https locations.
	"json.schemaDownload.enable": true,

	// Associate schemas to JSON files in the current project.
	"json.schemas": [],

	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",

	// Enable/disable JSON validation.
	"json.validate.enable": true,

	// Enable dropping files into a Markdown editor while holding Shift. Requires enabling `editor.dropIntoEditor.enabled`.
	"markdown.editor.drop.enabled": true,

	// Enable pasting files into a Markdown editor inserts Markdown links. Requires enabling `editor.experimental.pasteActions.enabled`.
	"markdown.experimental.editor.pasteLinks.enabled": true,

	// Controls where links in Markdown files should be opened.
	//  - currentGroup: Open links in the active editor group.
	//  - beside: Open links beside the active editor.
	"markdown.links.openLocation": "currentGroup",

	// Enable highlighting link occurrences in the current document.
	"markdown.occurrencesHighlight.enabled": false,

	// Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
	"markdown.preview.breaks": false,

	// Double click in the Markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the Markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the Markdown preview.
	"markdown.preview.fontSize": 14,

	// Controls the line height used in the Markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,

	// Convert URL-like text to links in the Markdown preview.
	"markdown.preview.linkify": true,

	// Mark the current editor selection in the Markdown preview.
	"markdown.preview.markEditorSelection": true,

	// Controls how links to other Markdown files in the Markdown preview should be opened.
	//  - inPreview: Try to open links in the Markdown preview.
	//  - inEditor: Try to open links in the editor.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// When a Markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,

	// When a Markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Enable some language-neutral replacement and quotes beautification in the Markdown preview.
	"markdown.preview.typographer": false,

	// A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],

	// Enable path suggestions while writing links in Markdown files.
	"markdown.suggest.paths.enabled": true,

	// Enable debug logging for the Markdown extension.
	"markdown.trace.extension": "off",

	// Traces the communication between VS Code and the Markdown language server.
	"markdown.trace.server": "off",

	// Try to update links in Markdown files when a file is renamed/moved in the workspace. Use `markdown.updateLinksOnFileMove.include` to configure which files trigger link updates.
	//  - prompt: Prompt on each file move.
	//  - always: Always update links automatically.
	//  - never: Never try to update link and don't prompt.
	"markdown.updateLinksOnFileMove.enabled": "never",

	// Enable updating links when a directory is moved or renamed in the workspace.
	"markdown.updateLinksOnFileMove.enableForDirectories": true,

	// Glob patterns that specifies files that trigger automatic link updates. See `markdown.updateLinksOnFileMove.enabled` for details about this feature.
	"markdown.updateLinksOnFileMove.include": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"**/*.{jpg,jpe,jpeg,png,bmp,gif,ico,webp,avif,tiff,svg,mp4}"
	],

	// Validate duplicated definitions in the current file.
	"markdown.validate.duplicateLinkDefinitions.enabled": "warning",

	// Enable all error reporting in Markdown files.
	"markdown.validate.enabled": false,

	// Validate links to other files in Markdown files, for example `[link](/path/to/file.md)`. This checks that the target files exists. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fileLinks.enabled": "warning",

	// Validate the fragment part of links to headers in other files in Markdown files, for example `[link](/path/to/file.md#header)`. Inherits the setting value from `markdown.validate.fragmentLinks.enabled` by default.
	"markdown.validate.fileLinks.markdownFragmentLinks": "inherit",

	// Validate fragment links to headers in the current Markdown file, for example `[link](#header)`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.fragmentLinks.enabled": "warning",

	// Configure links that should not be validated. For example adding `/about` would not validate the link `[about](/about)`, while the glob `/assets/**/*.svg` would let you skip validation for any link to `.svg` files under the `assets` directory.
	"markdown.validate.ignoredLinks": [],

	// Validate reference links in Markdown files, for example `[link][ref]`. Requires enabling `markdown.validate.enabled`.
	"markdown.validate.referenceLinks.enabled": "warning",

	// Validate link definitions that are unused in the current file.
	"markdown.validate.unusedLinkDefinitions.enabled": "hint",

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Enable/disable automatic closing of JSX tags.
	"javascript.autoClosingTags": true,

	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"javascript.format.semicolons": "ignore",

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.checkJs": false,

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"javascript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"javascript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"javascript.inlayHints.variableTypes.enabled": false,

	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"javascript.preferences.autoImportFileExcludePatterns": [],

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for Quick Fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"javascript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames.
	"javascript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames.
	"javascript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in JavaScript files.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// Enable/disable auto import suggestions.
	"javascript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members.
	"javascript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements.
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable generating `@returns` annotations for JSDoc templates.
	"javascript.suggest.jsdoc.generateReturns": true,

	// Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
	"javascript.suggest.names": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for JavaScript files in the editor.
	"javascript.suggestionActions.enabled": true,

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,

	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.checkJs": false,

	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// Sets the module system for the program. See more: https://www.typescriptlang.org/tsconfig#module.
	"js/ts.implicitProjectConfig.module": "ESNext",

	// Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictNullChecks": true,

	// Set target JavaScript language version for emitted JavaScript and include library declarations. See more: https://www.typescriptlang.org/tsconfig#target.
	"js/ts.implicitProjectConfig.target": "ES2020",

	// Enable/disable automatic closing of JSX tags.
	"typescript.autoClosingTags": true,

	// Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.check.npmIsInstalled": true,

	// Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after type assertions in TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"typescript.format.semicolons": "ignore",

	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"typescript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	"typescript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	"typescript.inlayHints.variableTypes.enabled": false,

	// Suppress type hints on variables whose name is identical to the type name. Requires using TypeScript 4.8+ in the workspace.
	"typescript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,

	// Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
	"typescript.locale": "auto",

	// Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": "",

	// Specify glob patterns of files to exclude from auto imports. Requires using TypeScript 4.8 or newer in the workspace.
	"typescript.preferences.autoImportFileExcludePatterns": [],

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// Enable/disable searching `package.json` dependencies for available auto imports.
	//  - auto: Search dependencies based on estimated performance impact.
	//  - on: Always search dependencies.
	//  - off: Never search dependencies.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for Quick Fixes.
	//  - auto: Infer quote type from existing code
	//  - single: Always use single quotes: `'`
	//  - double: Always use double quotes: `"`
	"typescript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames.
	"typescript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames.
	"typescript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in TypeScript files.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,

	// Enable/disable auto import suggestions.
	"typescript.suggest.autoImports": true,

	// Enable/disable snippet completions for class members.
	"typescript.suggest.classMemberSnippets.enabled": true,

	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements.
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable snippet completions from TS Server.
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// Enable/disable generating `@returns` annotations for JSDoc templates.
	"typescript.suggest.jsdoc.generateReturns": true,

	// Enable/disable snippet completions for methods in object literals. Requires using TypeScript 4.7+ in the workspace.
	"typescript.suggest.objectLiteralMethodSnippets.enabled": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for TypeScript files in the editor.
	"typescript.suggestionActions.enabled": true,

	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,

	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",

	// Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
	// 
	// - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
	// - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
	// 
	// See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
	"typescript.tsdk": "",

	// Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.enableTracing": false,

	// (Experimental) Enables project wide error reporting.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",

	// The maximum amount of memory (in MB) to allocate to the TypeScript server process.
	"typescript.tsserver.maxTsServerMemory": 3072,

	// Additional paths to discover TypeScript Language Service plugins.
	"typescript.tsserver.pluginPaths": [],

	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",

	// This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols.
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
	//  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
	//  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
	//  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
	"typescript.tsserver.useSyntaxServer": "auto",

	// Configure which watching strategies should be used to keep track of files and directories.
	"typescript.tsserver.watchOptions": {},

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,

	// Controls which files are searched by [Go to Symbol in Workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols.
	//  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// この設定は'comments.openView' を優先し、非推奨です。
	// コメント パネルを開くタイミングを制御します。
	"comments.openPanel": "openOnSessionStartWithComments",

	// コメント パネルが開くべきタイミングを制御します。
	//  - never: コメント ビューが開くことはありません。
	//  - file: コメント付きのファイルがアクティブになると、コメント ビューが開きます。
	//  - firstFile: このセッション中にコメント ビューがまだ開いていない場合は、コメントを含むファイルがアクティブになっているセッション中に初めて開きます。
	"comments.openView": "firstFile",

	// コメント タイムスタンプ ('1 日前' など) に相対時間を使用するかどうかを決定します。
	"comments.useRelativeTime": true,

	// コメント範囲とコメントを含むエディターで、コメント バーとコメント スレッドを表示するかどうかを制御します。コメントはコメント ビューを介して引き続きアクセスでき、コマンド "Comments: Toggle Editor Commenting" の切り替えを実行するのと同じ方法でコメントがオンに切り替わります。
	"comments.visible": true,

	// 任意のファイルにブレークポイントを設定できるようにします。
	"debug.allowBreakpointsEverywhere": false,

	// デバッガーによって遅延解決される変数 (ゲッターなど) の値を自動的に表示します。
	"debug.autoExpandLazyVariables": false,

	// アクティブなデバッグ セッションがある場合に、ウィンドウを閉じたときに確認を行うかどうかを制御します。
	//  - never: 確認しません。
	//  - always: デバッグ セッションがあるかどうかを常に確認します。
	"debug.confirmOnExit": "never",

	// デバッグ コンソールの入力候補を受け入れるかどうかを制御します。また、入力は、デバッグコンソールに入力された内容を評価するためにも使用されます。
	"debug.console.acceptSuggestionOnEnter": "off",

	// デバッグ セッションの終了時にデバッグ コンソールを自動的に閉じるかどうかを制御します。
	"debug.console.closeOnEnd": false,

	// デバッグ コンソールで同一の行を折りたたみ、出現回数をバッジ付きで表示するかどうか制御します。
	"debug.console.collapseIdenticalLines": true,

	// デバッグ コンソールのフォント ファミリを制御します。
	"debug.console.fontFamily": "default",

	// デバッグ コンソール内のフォント サイズをピクセル単位で制御します。
	"debug.console.fontSize": 14,

	// 以前に型指定された入力をデバッグ コンソールが提案する必要があるかどうかを制御します。
	"debug.console.historySuggestions": true,

	// デバッグ コンソール内での行の高さをピクセル単位で制御します。フォント サイズから行の高さを計算するには 0 を使用します。
	"debug.console.lineHeight": 0,

	// 行をデバッグ コンソールで折り返す必要があるかどうかを制御します。
	"debug.console.wordWrap": true,

	// 逆アセンブリ ビューでソース コードを表示する。
	"debug.disassemblyView.showSourceCode": true,

	// デバッガーが中断したときにエディターにフォーカスを設定するかどうかを制御します。
	"debug.focusEditorOnBreak": true,

	// デバッガーが中断したときにワークベンチ ウィンドウにフォーカスするかどうかを制御します。
	"debug.focusWindowOnBreak": true,

	// デバッグ中にエディターの行内に変数値を表示します。
	//  - on: デバッグ中に変数値を常にインラインでエディターに表示します。
	//  - off: デバッグ中に変数値をインラインでエディターに表示しません。
	//  - auto: 言語でインライン値の場所がサポートされている場合、デバッグ中に変数値をインラインでエディターに表示します。
	"debug.inlineValues": "auto",

	// いつ内部デバッグ コンソールを開くかを制御します。
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// preLaunchTask の実行後にエラーが発生した場合の処理を制御します。
	//  - debugAnyway: タスクのエラーを無視し、デバッグを開始します。
	//  - showErrors: 問題ビューを表示し、デバッグを開始しません。
	//  - prompt: ユーザーに確認します。
	//  - abort: デバッグを取り消します。
	"debug.onTaskErrors": "prompt",

	// いつデバッグ ビューを開くかを制御します。
	"debug.openDebug": "openOnDebugBreak",

	// デバッグ セッションの終了時にエクスプローラー ビューを自動的に開きます。
	"debug.openExplorerOnEnd": false,

	// デバッグ セッションを開始する前にどのエディターを保存するかを制御します。
	//  - allEditorsInActiveGroup: デバッグ セッションを開始する前に、アクティブなグループ内のすべてのエディターを保存します。
	//  - nonUntitledEditorsInActiveGroup: デバッグ セッションを開始する前に、アクティブなグループ内のすべてのエディターを、無題のものを除いて保存します。
	//  - none: デバッグ セッションを開始する前にエディターを保存しません。
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// ブレークポイントを概要ルーラーに表示するかどうかを制御します。
	"debug.showBreakpointsInOverviewRuler": false,

	// デバッグ中にインライン ブレークポイント候補の装飾をエディターに表示するかどうかを制御します。
	"debug.showInlineBreakpointCandidates": true,

	// いつデバッグ ステータス バーを表示するかを制御します。
	//  - never: 今後ステータス バーにデバッグを表示しない
	//  - always: ステータス バーにデバッグを常に表示する
	//  - onFirstSessionStart: 初めてデバッグが開始されたときのみステータス バーにデバッグを表示する
	"debug.showInStatusBar": "onFirstSessionStart",

	// デバッグ ツール バーにデバッグのサブセッションを表示するかどうかを制御します。false に設定されている場合、サブセッションに対する停止コマンドによって、親セッションも停止します。
	"debug.showSubSessionsInToolBar": false,

	// 統合または外部ターミナルで新しいデバッグ セッションを開始する前に、ターミナルをクリアします。
	"debug.terminal.clearBeforeReusing": false,

	// デバッグ ツールバーの位置を制御します。すべてのビューに表示する場合には `floating`、デバッグ ビューの場合は `docked` に設定します。その他の場合は、`hidden` にします。
	"debug.toolBarLocation": "floating",

	// グローバル デバッグ起動構成。ワークスペースで共有されている 'launch.json' の代わりに使用する必要があります。
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// '#testing.followRunningTest#' がオンの場合は、実行されたテストを常に公開します。この設定をオフにすると、失敗したテストのみ公開されます。
	"testing.alwaysRevealTestOnStateChange": false,

	// エラーのピーク ビューを自動的に開くタイミングを構成します。
	//  - failureAnywhere: エラーの場所に関係なく、自動的に開きます。
	//  - failureInVisibleDocument: 参照可能なドキュメントでテストが失敗したときに自動的に開きます。
	//  - never: 自動的に開くことはありません。
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// 自動実行モードでピーク ビューを自動的に開くかどうかを制御します。
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// テストが期限切れとしてマークされ、新しい実行を開始してから待機する時間 (ミリ秒単位)。
	"testing.autoRun.delay": 1000,

	// どのテストを自動的に実行するかを制御します。
	//  - all: 自動実行が切り替えられたときに、検出されたすべてのテストを自動的に実行します。変更されたときに、個々のテストを再実行します。
	//  - rerun: 変更されたときに、個々のテストを再実行します。まだ実行されていないテストは自動的に実行されません。
	"testing.autoRun.mode": "all",

	// とじしろ内のテスト デコレーションをクリックした場合に実行する操作を制御します。
	//  - run: テストを実行します。
	//  - debug: テストをデバッグします。
	//  - contextMenu: その他のオプションについては、コンテキスト メニューを開きます。
	"testing.defaultGutterClickAction": "run",

	// 実行中のテストをテスト エクスプローラー ビューでフォローするかどうかを制御します。
	"testing.followRunningTest": true,

	// テスト デコレーションがエディターのとじしろに表示するかどうかを制御します。
	"testing.gutterEnabled": true,

	// いつテスト ビューを開くかを制御します。
	//  - neverOpen: テスト ビューを自動的に開かない
	//  - openOnTestStart: テストの開始時にテスト ビューを開く
	//  - openOnTestFailure: テストの失敗に関するテスト ビューを開く
	"testing.openTesting": "openOnTestStart",

	// テストを実行する前にすべてのダーティ エディターを保存するかどうかを制御します。
	"testing.saveBeforeTest": true,

	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"css.format.braceStyle": "collapse",

	// Enable/disable default CSS formatter.
	"css.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `css.format.preserveNewLines` is enabled.
	"css.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"css.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"css.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"css.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"css.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in CSS hovers.
	"css.hover.documentation": true,

	// Show references to MDN in CSS hovers.
	"css.hover.references": true,

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"less.format.braceStyle": "collapse",

	// Enable/disable default LESS formatter.
	"less.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `less.format.preserveNewLines` is enabled.
	"less.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"less.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"less.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"less.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"less.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in LESS hovers.
	"less.hover.documentation": true,

	// Show references to MDN in LESS hovers.
	"less.hover.references": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Put braces on the same line as rules (`collapse`) or put braces on own line (`expand`).
	"scss.format.braceStyle": "collapse",

	// Enable/disable default SCSS formatter.
	"scss.format.enable": true,

	// Maximum number of line breaks to be preserved in one chunk, when `scss.format.preserveNewLines` is enabled.
	"scss.format.maxPreserveNewLines": null,

	// Separate rulesets by a blank line.
	"scss.format.newlineBetweenRules": true,

	// Separate selectors with a new line.
	"scss.format.newlineBetweenSelectors": true,

	// Whether existing line breaks before elements should be preserved.
	"scss.format.preserveNewLines": true,

	// Ensure a space character around selector separators '>', '+', '~' (e.g. `a > b`).
	"scss.format.spaceAroundSelectorSeparator": false,

	// Show tag and attribute documentation in SCSS hovers.
	"scss.hover.documentation": true,

	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// 有効にした場合、拡張機能の更新を自動的に確認します。拡張機能に更新がある場合は、拡張機能ビューで古くなった拡張機能として表示されます。更新は Microsoft オンライン サービスから取得されます。
	"extensions.autoCheckUpdates": true,

	// 拡張機能の自動更新の動作を制御します。更新プログラムは、Microsoft オンライン サービスからフェッチされます。
	//  - true: すべての拡張機能の更新プログラムを自動的にダウンロードしてインストールします。
	//  - onlyEnabledExtensions: 有効な拡張機能のみの更新プログラムを自動的にダウンロードしてインストールします。無効な拡張機能は自動的には更新されません。
	//  - false: 拡張機能は自動的には更新されません。
	"extensions.autoUpdate": true,

	// 有効にした場合、拡張機能の詳細を表示したエディターは拡張機能ビューから移動すると自動的に閉じられるようになります。
	"extensions.closeExtensionDetailsOnViewChange": false,

	// 拡張機能がここに表示されている場合、その拡張機能が URI を処理するときに確認プロンプトは表示されません。
	"extensions.confirmedUriHandlerExtensionIds": [],

	// 別の拡張機能ホスト プロセスで実行するように拡張機能を構成します。
	"extensions.experimental.affinity": {},

	// 有効にすると、拡張機能ホストは新しい UtilityProcess Electron API を使用して起動されます。
	"extensions.experimental.useUtilityProcess": false,

	// 有効にした場合、拡張機能の推奨事項の通知を表示しません。
	"extensions.ignoreRecommendations": false,

	// この設定は非推奨化されています。extensions.ignoreRecommendations 設定を使用して、推奨事項の通知を制御します。既定で推奨ビューを非表示にするには、拡張機能ビューの可視性アクションを使用します。
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// 拡張機能の信頼されていないワークペースのサポートをオーバーライドします。`true` を使用する拡張機能は常に有効になります。`limited` を使用する拡張機能は常に有効になり、信頼を必要とする機能は拡張子により非表示にされます。`false` を使用している拡張機能は、ワークスペースが信頼されている場合にのみ有効になります。
	"extensions.supportUntrustedWorkspaces": {},

	// 拡張機能の仮想ワークスぺースのサポートをオーバーライドします。
	"extensions.supportVirtualWorkspaces": {},

	// web worker 拡張機能ホストを有効にします。
	//  - true: Web Worker 拡張機能のホストは常に起動されます。
	//  - false: Web Worker 拡張機能のホストは起動されません。
	//  - auto: Web ワーカー拡張機能のホストは、Web 拡張機能で必要とされるときに起動されます。
	"extensions.webWorker": "auto",

	// 出力ビューでスマート スクロール機能を有効/無効にします。スマート スクロールを使用する場合、出力ビューをクリックすると自動的にスクロールがロックされ、最後の行をクリックするとロックが解除されます。
	"output.smartScroll.enabled": true,

	// 同期中に無視される拡張機能の一覧です。拡張機能の識別子は常に `${publisher}.${name}` です。たとえば、`vscode.csharp` です。
	"settingsSync.ignoredExtensions": [],

	// 同期中に無視される設定を構成します。
	"settingsSync.ignoredSettings": [],

	// 各プラットフォームのキー バインドを同期します。
	"settingsSync.keybindingsPerPlatform": true,

	// インタラクティブ ウィンドウのコード セルを既定で折りたたむかどうかを制御します。
	"interactiveWindow.collapseCellInputCode": "fromEditor",

	// 有効にすると、ノートブックの階層リンクにコード セルが含まれます。
	"notebook.breadcrumbs.showCodeCells": true,

	// フォーカスインジケーターが描画されている場所を、セルの境界線または左端余白に沿って制御します。
	"notebook.cellFocusIndicator": "gutter",

	// セルのツールバーを表示するか非表示にするかどうか。
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// ポイントしたときまたはクリック時にセルのツールバーを表示するかどうか。
	"notebook.cellToolbarVisibility": "click",

	// ノートブック エディターをコンパクト形式で表示するかどうかを制御します。たとえば、オンにすると、左余白の幅が小さくなります。
	"notebook.compactView": true,

	// 出力アクションを出力ツールバーにレンダリングするかどうかを制御します。
	"notebook.consolidatedOutputButton": true,

	// [実行] ボタンの横にあるドロップダウンで、追加アクションを表示するかどうかを制御します。
	"notebook.consolidatedRunButton": false,

	// ノートブックに拡張テキスト差分エディターを使用するかどうか。
	"notebook.diff.enablePreview": true,

	// メタデータの違いを非表示にする
	"notebook.diff.ignoreMetadata": false,

	// 出力の違いを非表示にする
	"notebook.diff.ignoreOutputs": false,

	// 出力 MIME 種類の優先度リスト
	"notebook.displayOrder": [],

	// ノートブック エディターでドラッグ アンド ドロップによるセルの移動を許可するかどうかを制御します。
	"notebook.dragAndDropEnabled": true,

	// ノートブックで使用されるコード エディターの設定。これを使用して、ほとんどのエディター * 設定をカスタマイズできます。
	"notebook.editorOptionsCustomizations": {},

	// ノートブック エディター内でグローバル ツールバーをレンダリングするかどうかを制御します。
	"notebook.globalToolbar": true,

	// [ノートブック] ツールバーのアクションがラベルをレンダリングするかどうかを制御します。
	"notebook.globalToolbarShowLabel": "always",

	// セルを挿入アクションを表示するかどうかを制御します。
	//  - betweenCells: セル間でカーソルを合わせたときに表示されるツールバー。
	//  - notebookToolbar: ノートブック エディターの上部にあるツールバー。
	//  - both: 両方のツールバー。
	//  - hidden: 挿入アクションがどこにも表示されません。
	"notebook.insertToolbarLocation": "both",

	// 使用するカーネル ピッカーの種類を制御します。
	//  - all: すべてのカーネルを表示します。
	//  - mru: 実験: 最近使用したカーネルを表示します。
	"notebook.kernelPicker.type": "all",

	// セル エディターでの行番号の表示を制御します。
	"notebook.lineNumbers": "off",

	// ノートブックでレンダリングされたマークアップのフォント サイズをピクセル単位で制御します。`0` に設定すると、`editor.fontSize` の 120% が使用されます。
	"notebook.markup.fontSize": 0,

	// 有効にすると、セルエディター内の現在のカーソルが最初または最後の行にあるときに、カーソルは次または前のセルに移動できます。
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// 有効にすると、ノートブック アウトラインにコード セルが表示されます。
	"notebook.outline.showCodeCells": false,

	// テキスト出力のテキスト行数を制御します。
	"notebook.output.textLineLimit": 30,

	// ノートブック セルの出力テキストのフォント ファミリ。空に設定すると、`editor.fontFamily` が使用されます。
	"notebook.outputFontFamily": "",

	// ノートブック セルの出力テキストのフォント サイズ。`editor.fontSize#` に設定すると、`#editor.fontSize` が使用されます。
	"notebook.outputFontSize": 0,

	// ノートブック セルの出力テキストの行の高さ。
	//  - 0 から 8 の値は、フォント サイズの乗数として使用されます。
	//  - 8 以上の値が有効な値として使用されます。
	"notebook.outputLineHeight": 22,

	// セルのステータス バーを表示するかどうか。
	//  - hidden: セルのステータス バーは常に非表示です。
	//  - visible: セルのステータス バーは常に表示されています。
	//  - visibleAfterExecute: セルのステータス バーは、セルが実行されるまで非表示になります。その後可視化され、実行状態を表示できるようになります。
	"notebook.showCellStatusBar": "visible",

	// マークダウン ヘッダー折りたたみ矢印が表示されるタイミングを制御します。
	//  - always: 折りたたみコントロールは常に表示されています。
	//  - never: 折りたたみコントロールを表示せず、余白のサイズを小さくします。
	//  - mouseover: 折りたたみコントロールは、カーソルを合わせたときにのみ表示されます。
	"notebook.showFoldingControls": "mouseover",

	// セルごとに個別の元に戻す/やり直しのスタックを使用するかどうか。
	"notebook.undoRedoPerCell": true,

	// 有効にすると、低速レンダラーが自動的にプロファイルされます
	"application.experimental.rendererProfiling": false,

	// 対話型ウィンドウを自動的にスクロールして、最後に実行されたステートメントの出力を表示します。この値が false の場合、最後のセルが既にスクロール先の場合にのみウィンドウがスクロールされます。
	"interactiveWindow.alwaysScrollOnNewCell": true,

	// ウィンドウの再読み込み時にインタラクティブ ウィンドウ セッション/履歴を復元する必要があるかどうかを制御します。インタラクティブ ウィンドウで使用されるコントローラーの状態がウィンドウの再読み込み時に保持されるかどうかは、コントローラーに貢献する拡張機能によって制御されます。
	"interactiveWindow.restore": false,

	// 自動タスクを有効にする - タスクは信頼されていないワークスペースでは実行されないことに注意してください。
	//  - on: 常に
	//  - off: なし
	"task.allowAutomaticTasks": "on",

	// すべてのタスク プロバイダー拡張機能に対する 'provideTasks' の有効化を制御します。Tasks: Run Task コマンドが低速の場合、タスク プロバイダーの自動検出を無効にすると改善される可能性があります。個々の拡張機能で、自動検出を無効にする設定が備わっている場合もあります。
	"task.autoDetect": "on",

	// タスクの実行時に問題マッチャーのプロンプトを表示するかどうかを構成します。'true' に設定してプロンプトしないようにするか、タスクの種類のディクショナリを使用して、特定のタスクの種類に対してのみプロンプトをオフにします。
	"task.problemMatchers.neverPrompt": false,

	// [タスクの実行] など、タスク クイック ピックに詳細があるタスクについてタスクの詳細を表示するかどうかを制御します。
	"task.quickOpen.detail": true,

	// タスククイックオープンダイアログで追跡された最近のアイテムの数を制御します。
	"task.quickOpen.history": 30,

	// タスクがプロバイダーによってグループ化されている場合、[タスク: タスクの実行] コマンドで、高速の 2 レベル ピッカーの代わりに低速の [すべて表示] の動作を使用します。
	"task.quickOpen.showAll": false,

	// 選択するタスクが 1 つしかない場合に、タスクのクイック ピックをスキップするかどうかを制御します。
	"task.quickOpen.skip": false,

	// ウィンドウの再読み込み時に、問題マッチャーがあるタスクに再接続します。
	"task.reconnection": true,

	// タスクを実行する前に、すべてのダーティなエディターを保存してください。
	//  - always: 実行する前に常にすべてのエディターを保存します。
	//  - never: 実行する前にエディターを保存しません。
	//  - prompt: 実行前にエディターを保存するかどうかを確認します。
	"task.saveBeforeRun": "always",

	// 監視タスクで見つかった最初の問題など、ターミナル バッファーの関心のあるポイントの装飾を表示します。これは今後のタスクに対してのみ有効になります。`terminal.integrated.shellIntegration.decorationsEnabled` はこの設定より優先順位高いです
	"task.showDecorations": true,

	// プロバイダーの速度が遅いときに警告を表示するかどうかを構成します
	"task.slowProviderWarning": true,

	// ターミナルでエクスプローラーからファイルを開くときに、起動するターミナルの種類を決定します。
	//  - integrated: VS Code の統合ターミナルを使用します。
	//  - external: 構成済みの外部ターミナルを使用します。
	"terminal.explorerKind": "integrated",

	// どのターミナルを Linux で実行するかをカスタマイズします。
	"terminal.external.linuxExec": "xterm",

	// どのターミナル アプリケーションを macOS で実行するかをカスタマイズします。
	"terminal.external.osxExec": "Terminal.app",

	// どのターミナルを Windows で実行するかをカスタマイズします。
	"terminal.external.windowsExec": "C:\\WINDOWS\\System32\\cmd.exe",

	// ターミナルでコードのキーバインドを許可するかどうか。これが true で、キーストロークの結果がコード内の場合、`terminal.integrated.commandsToSkipShell` をバイパスすることに注意してください。これを false に設定すると、Ctrl + k キーを (VS Code ではなく) シェルに移動する場合に特に便利です。
	"terminal.integrated.allowChords": true,

	// メニュー バー ニーモニック (Alt+F など) でメニュー バーを開くかどうかを指定します。これを true にした場合、すべての Alt キーストロークがシェルをスキップするようになることにご注意ください。これは、macOS では何の効果もありません。
	"terminal.integrated.allowMnemonics": false,

	// 有効にすると、alt/option を押しながらクリックすると、`editor.multiCursorModifier` が `'alt'` (既定値) に設定されているときに、プロンプト カーソルがマウスの下に移動します。シェルによっては、これは確実に機能しない可能性があります。
	"terminal.integrated.altClickMovesCursor": true,

	// タスクやデバッグなどのオートメーション関連のターミナルの使用に Linux で使用するターミナル プロファイル。現在、この設定は、`terminal.integrated.automationShell.linux` (非推奨になりました) が設定されている場合は無視されます。
	"terminal.integrated.automationProfile.linux": null,

	// タスクやデバッグなどのオートメーション関連のターミナルの使用に macOS で使用するターミナル プロファイル。現在、この設定は、`terminal.integrated.automationShell.osx` (非推奨になりました) が設定されている場合は無視されます。
	"terminal.integrated.automationProfile.osx": null,

	// タスクやデバッグなどのオートメーション関連のターミナルの使用に使用するターミナル プロファイル。現在、この設定は、`terminal.integrated.automationShell.windows` (非推奨になりました) が設定されている場合は無視されます。
	"terminal.integrated.automationProfile.windows": null,

	// これは非推奨です。オートメーション シェルを構成するための新しい推奨される方法は、`terminal.integrated.automationProfile.linux`を使用してターミナルオートメーション プロファイルを作成することです。これは現在、新しいオートメーション プロファイル設定よりも優先されますが、今後変更される予定です。
	// このパスを設定すると、`terminal.integrated.shell.linux` がオーバーライドされ、`shellArgs` の値が無視されます。この値は、タスクやデバッグなどのオートメーション関連のターミナル使用に関するものです。
	"terminal.integrated.automationShell.linux": null,

	// これは非推奨です。オートメーション シェルを構成するための新しい推奨される方法は、`terminal.integrated.automationProfile.osx`を使用してターミナルオートメーション プロファイルを作成することです。これは現在、新しいオートメーション プロファイル設定よりも優先されますが、今後変更される予定です。
	// このパスを設定すると、`terminal.integrated.shell.osx` がオーバーライドされ、`shellArgs` の値が無視されます。この値は、タスクやデバッグなどのオートメーション関連のターミナル使用に関するものです。
	"terminal.integrated.automationShell.osx": null,

	// これは非推奨です。オートメーション シェルを構成するための新しい推奨される方法は、`terminal.integrated.automationProfile.windows`を使用してターミナルオートメーション プロファイルを作成することです。これは現在、新しいオートメーション プロファイル設定よりも優先されますが、今後変更される予定です。
	// このパスを設定すると、`terminal.integrated.shell.windows` がオーバーライドされ、`shellArgs` の値が無視されます。この値は、タスクやデバッグなどのオートメーション関連のターミナル使用に関するものです。
	"terminal.integrated.automationShell.windows": null,

	// ターミナルで検出されたときに自動的に応答されるメッセージ セットです。メッセージが十分に具体的であれば、これを使用して一般的な応答を自動化できます。
	// 
	// 注釈:
	// 
	// - `"Terminate batch job (Y/N)": "Y\r"` を使用して、Windows でバッチ ジョブの終了プロンプトに自動的に応答します。
	// - メッセージにはエスケープ シーケンスが含まれるため、返信はスタイル付きテキストにならない可能性があります。
	// - 各返信は 1 秒に 1 回のみ行えます。
	// - 返信で Enter キーを示すには、`"\r"` を使用します。
	// - 既定のキーの設定を解除するには、値を null 値に設定します。
	// - 新しい VS Code が適用されない場合は、VS Code を再起動します。
	"terminal.integrated.autoReplies": {},

	// トリガーされた場合に、ターミナル タブ内にベルを表示するためのミリ秒数です。
	"terminal.integrated.bellDuration": 1000,

	// キー バインドがシェルに送信されず、代わりに常に VS Code で処理されるコマンド ID のセット。これにより、シェルによって通常使用されるキー バインドが、ターミナルがフォーカスされていない場合と同じ動作をするようにします。たとえば、'Ctrl+P' で Quick Open を起動します。
	// 
	// &nbsp;
	// 
	// 既定では、多くのコマンドがスキップされます。既定値をオーバーライドし、代わりにそのコマンドのキー バインドをシェルに渡すには、先頭に '-' 文字が付いているコマンドを追加します。たとえば、'-workbench.action.quickOpen' を追加して、'Ctrl+P' でシェルにアクセスできるようにします。
	// 
	// &nbsp;
	// 
	// 既定でスキップされる以下のコマンドの一覧は、設定エディターで表示したときには切り詰められます。完全な一覧を表示するには、下の一覧から最初のコマンドを [既定の設定の JSON を開く](command:workbench.action.openRawDefaultSettings '既定の設定 (JSON) を開く') して検索します。
	// 
	// &nbsp;
	// 
	// 既定でスキップされるコマンド:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.closeQuickOpen
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copyLastCommand
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.copySelectionAsHtml
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.goToRecentDirectory
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.quickFix
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runRecentCommand
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// アクティブなターミナル セッションがある場合に、ウィンドウを閉じたときに確認を行うかどうかを制御します。
	//  - never: 確認しません。
	//  - always: ターミナルがあるかどうか常に確認します。
	//  - hasChildProcesses: 子プロセスがあるターミナルがあるかどうかを確認します。
	"terminal.integrated.confirmOnExit": "never",

	// 子プロセスがある場合にターミナルの強制終了を確認するかどうかを制御します。エディターに設定すると、子プロセスがある場合、エディター領域のターミナルは変更済みとしてマークされます。子プロセスの検出は、シェルの子プロセスとしてプロセスを実行しない Git Bash のようなシェルでは適切に機能しない可能性があることに注意してください。
	//  - never: 確認しません。
	//  - editor: ターミナルがエディター内にあるかどうかを確認します。
	//  - panel: ターミナルがパネル内にあるかどうかを確認します。
	//  - always: ターミナルがエディターとパネルのどちらにあるかを確認します。
	"terminal.integrated.confirmOnKill": "editor",

	// ターミナルで選択したテキストをクリップボードにコピーするかどうかを制御します。
	"terminal.integrated.copyOnSelection": false,

	// ターミナルでカーソルを点滅させるかどうかを制御します。
	"terminal.integrated.cursorBlinking": false,

	// ターミナル カーソルのスタイルを制御します。
	"terminal.integrated.cursorStyle": "block",

	// `terminal.integrated.cursorStyle` が `line` に設定されている場合のカーソルの幅を制御します。
	"terminal.integrated.cursorWidth": 1,

	// フォントを使用する代わりに、ブロック要素およびボックス描画文字のカスタム グリフを描画するかどうか。通常は、連続した直線を使用した方が適切なレンダリングを行います。これは DOM レンダラーでは動作しないことにご注意ください。
	"terminal.integrated.customGlyphs": true,

	// ターミナルが起動される明示的な開始パスです。これは、シェル プロセスの現在の作業ディレクトリ (cwd) として使用されます。これは特に、ルート ディレクトリが便利な cwd でない場合にワークスペースの設定で役立ちます。
	"terminal.integrated.cwd": "",

	// 新規に作成されたターミナルの表示場所を制御します。
	//  - editor: エディターでのターミナルの作成
	//  - view: ターミナル ビューでのターミナルの作成
	"terminal.integrated.defaultLocation": "view",

	// Linux で使用される既定のプロファイルです。`terminal.integrated.shell.linux` または `terminal.integrated.shellArgs.linux` のいずれかが設定されている場合、現在この設定は無視されます。
	//  - null: 既定値を自動的に検出する
	//  - sh: $(terminal) sh
	// - path: /bin/sh
	//  - bash: $(terminal-bash) bash
	// - path: /usr/bin/bash
	//  - bash (2): $(terminal) bash (2)
	// - path: /usr/bin/bash
	//  - rbash: $(terminal) rbash
	// - path: /bin/rbash
	//  - rbash (2): $(terminal) rbash (2)
	// - path: /usr/bin/rbash
	//  - dash: $(terminal) dash
	// - path: /bin/dash
	//  - dash (2): $(terminal) dash (2)
	// - path: /usr/bin/dash
	//  - tmux: $(terminal-tmux) tmux
	// - path: /usr/bin/tmux
	//  - screen: $(terminal) screen
	// - path: /usr/bin/screen
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdentifier: ms-vscode.js-debug
	"terminal.integrated.defaultProfile.linux": null,

	// MacOS で使用される既定のプロファイルです。`terminal.integrated.shell.osx` または `terminal.integrated.shellArgs.osx` のいずれかが設定されている場合、現在この設定は無視されます。
	"terminal.integrated.defaultProfile.osx": null,

	// Windows で使用される既定のプロファイルです。`terminal.integrated.shell.windows` または `terminal.integrated.shellArgs.windows` のいずれかが設定されている場合、現在この設定は無視されます。
	"terminal.integrated.defaultProfile.windows": null,

	// '$LANG' 環境変数を検出して UTF-8 準拠のオプションに設定するかどうかを制御します。これは、VS Code のターミナルでは、シェルからのデータで UTF-8 エンコードのみがサポートされるためです。
	//  - auto: 既存の変数が存在しないか、または `'.UTF-8'` で終わっていない場合に、`$LANG` 環境変数を設定します。
	//  - off: $LANG' 環境変数は設定しないでください。
	//  - on: 常に '$LANG' 環境変数を設定します。
	"terminal.integrated.detectLocale": "auto",

	// ターミナルの太字のテキストで常に "明るい" ANSI 色のバリエーションを使用するかどうかを制御します。
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// 端末のベルを有効にするかどうかを制御します。これは、ターミナル名の横に視覚的ベルで表示されます。
	"terminal.integrated.enableBell": false,

	// ターミナルのファイル リンクを有効にするかどうかを指定します。各ファイルのリンクがファイル システムに対して確認されるため、特にネットワーク ドライブ上での作業時にリンクの動作が低速になることがあります。この変更は、新しいターミナルでのみ有効になります。
	"terminal.integrated.enableFileLinks": true,

	// ターミナルに複数の行を貼り付けるときに警告ダイアログを表示します。ダイアログに when:
	// 
	// - 角かっこで囲まれた貼り付けモードが表示されない 有効 (シェルはネイティブで複数行貼り付けをサポート)
	// - 貼り付けはシェルの読み取りラインによって処理されます (pwsh の場合)。
	"terminal.integrated.enableMultiLinePasteWarning": true,

	// ウィンドウの再読み込み時にワークスペースのターミナル セッション/履歴を保持します。
	"terminal.integrated.enablePersistentSessions": true,

	// Linux 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクト。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.linux": {},

	// macOS 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクトです。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.osx": {},

	// Windows 上のターミナルで使用される VS Code プロセスに追加される環境変数を含むオブジェクトです。環境変数を削除するには、'null' に設定します。
	"terminal.integrated.env.windows": {},

	// 各ターミナルに環境変更インジケーターを表示するかどうかを指定します。これは、拡張機能によってターミナルの環境が変更されたかどうか、または変更を加えたいかどうかを示します。
	//  - off: インジケーターを無効にします。
	//  - on: インジケーターを有効にします。
	//  - warnonly: ターミナルの環境が「古く」なった場合にのみ警告インジケーターを表示します。これは、ターミナルの環境が拡張機能によって変更されたことを示す情報インジケーターではありません。
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// 拡張機能が環境に参加する必要があり、まだ対話が行われていない場合に、自動的に端末を再起動するかどうか。
	"terminal.integrated.environmentChangesRelaunch": true,

	// 'Alt' キーを押した時のスクロール速度の乗数。
	"terminal.integrated.fastScrollSensitivity": 5,

	// ターミナルのフォント ファミリを制御し、既定値は `editor.fontFamily` となります。
	"terminal.integrated.fontFamily": "",

	// ターミナルのフォント サイズをピクセル単位で制御します。
	"terminal.integrated.fontSize": 14,

	// 端末内で太字以外のテキストに使用するフォントの太さ。"normal" と "bold" のキーワード、または 1 から 1000 の間の数字を受け入れます。
	"terminal.integrated.fontWeight": "normal",

	// 端末内で太字のテキストに使用するフォントの太さ。"normal" と "bold" のキーワード、または 1 から 1000 の間の数字を受け入れます。
	"terminal.integrated.fontWeightBold": "bold",

	// ターミナルで GPU を利用してレンダリングを行うかどうかを制御します。
	//  - auto: 最適なエクスペリエンスを提供するレンダラーを VS Code で検出できるようにします。
	//  - on: ターミナル内の GPU アクセラレーションを有効にします。
	//  - off: ターミナル内の GPU アクセラレータを無効にします。GPU アクセラレータをオフにすると、ターミナルのレンダリング速度は大幅に低下しますが、すべてのシステムで確実に動作するはずです。
	//  - canvas: ターミナルのフォールバック キャンバス レンダラーを使用します。これは、一部のシステムでパフォーマンスが向上する可能性がある Webgl の代わりに 2D コンテキストを使用します。キャンバス レンダラーでは、不透明な選択など一部の機能が制限されることにご注意ください。
	"terminal.integrated.gpuAcceleration": "auto",

	// `terminal.integrated.confirmOnKill` 設定を使用するときに無視するプロセス名のセット。
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// 新しいシェルがVS Codeから環境を継承する必要があるかどうか。これにより、ログイン シェルがソースとなり、$PATHおよびその他の開発変数が初期化される可能性があります。これは Windows には影響しません。
	"terminal.integrated.inheritEnv": true,

	// ターミナルの文字間隔を制御します。これは、文字間に追加する追加のピクセル数を表す整数値です。
	"terminal.integrated.letterSpacing": 0,

	// ターミナルの行の高さを制御します。この数にターミナルのフォント サイズを掛けて、実際の行の高さをピクセル単位で算出します。
	"terminal.integrated.lineHeight": 1,

	// ローカル エコーを有効にする必要がある場合。これにより、`terminal.integrated.localEchoLatencyThreshold` をオーバーライドします
	//  - on: 常に有効
	//  - off: 常に無効
	//  - auto: リモート ワークスペースに対してのみ有効
	"terminal.integrated.localEchoEnabled": "auto",

	// これらのプログラム名のいずれかがターミナル タイトルに見つかったとき、ローカル エコーは無効になります。
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// ネットワーク遅延の長さ (ミリ秒単位)。ローカルの編集内容はサーバーの確認を待たずに端末にエコーされます。'0' の場合ローカル エコーは常にオンになり、'-1' の場合は無効になります。
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// ローカル エコー テキストの端末スタイル。フォント スタイルまたは RGB カラー。
	"terminal.integrated.localEchoStyle": "dim",

	// macOS で option キーを押しながらクリックしたときに選択を強制するかどうかを制御します。これにより、標準 (行) の選択が強制され、列選択モードが使用されなくなります。これにより、たとえば tmux でマウス モードが有効になっている場合などに、通常のターミナル選択を使用してコピーと貼り付けを行うことができます。
	"terminal.integrated.macOptionClickForcesSelection": false,

	// option キーを macOS 上のターミナルの meta キーとして扱うかどうかを制御します。
	"terminal.integrated.macOptionIsMeta": false,

	// 各セルの前景色を設定すると、指定されたコントラスト比に見合うように変更を試みます。#146406 ごとの 'powerline' 文字には適用されないことに注意してください。値の例: 
	// 
	// - 1: 何も実行せず、標準テーマ カラーを使用します。
	// - 4.5: [WCAG AA 準拠 (最低)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html) (既定)。
	// - 7: [WCAG AAA 準拠 (拡張)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html)。
	// - 21: 黒地に白、または白地に黒。
	"terminal.integrated.minimumContrastRatio": 4.5,

	// マウス ホイールのスクロール イベントの 'deltaY' で使用される乗数です。
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// ターミナル プロセスをシャットダウンする必要がある場合 (例: ウィンドウまたはアプリケーションが閉じた場合)、これにより、前のターミナル セッション/履歴の内容を復元し、ワークスペースを次回開いたときにプロセスを再作成するタイミングが決定されます。
	// 
	// Caveats:
	// 
	// - プロセスの現在の作業ディレクトリの復元は、それがシェルでサポートされているかどうかによって異なります。
	// - シャットダウン中にセッションを保持する時間が制限されるため、待機時間の長いリモート接続を使用している場合に中止される可能性があります。
	//  - onExit: Windows または Linux で最後のウィンドウが閉じられた後、`workbench.action.quit` コマンドがトリガーされた場合 (コマンド パレット、キー バインド、メニュー) にプロセスの再活性化を行います。
	//  - onExitAndWindowClose: Windows または Linux で最後のウィンドウが閉じられた後、`workbench.action.quit` コマンドがトリガーされた場合 (コマンド パレット、キー バインド、メニュー)、またはウィンドウが閉じられた場合にプロセスの再活性化を行います。
	//  - never: ターミナル バッファーの復元や、プロセスの再作成を行わないでください。
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// 永続的なターミナル セッションに再接続するときに復元される回線の最大数を制御します。これを増やすと、より多くのメモリを犠牲にしてスクロールバックの回線が復元され、起動時に端末への接続にかかる時間が長くなります。この設定を有効にするには、値を `terminal.integrated.scrollback` 以下に設定する必要があります。
	"terminal.integrated.persistentSessionScrollback": 100,

	// ターミナル ドロップダウンを使用して新しいターミナルを作成するときに表示する Linux プロファイルです。省略可能な `args` を使用して、`path` プロパティを手動で設定してください。
	// 
	// 既存のプロファイルを一覧から非表示にするには、プロファイルを `null` に設定してください。例: `"bash": null`。
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// ターミナル ドロップダウンを使用して新しいターミナルを作成するときに表示する macOS プロファイルです。省略可能な `args` を使用して、`path` プロパティを手動で設定してください。
	// 
	// 既存のプロファイルを一覧から非表示にするには、プロファイルを `null` に設定してください。例: `"bash": null`。
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// ターミナル ドロップダウンを使用して新しいターミナルを作成するときに表示する Windows プロファイルです。シェルの場所を自動的に検出するには、`path` プロパティを使用してください。または、`source` プロパティを省略可能な `args` で手動で設定してください。
	// 
	// 既存のプロファイルを一覧から非表示にするには、プロファイルを `null` に設定してください。例: `"Ubuntu-20.04 (WSL)": null`。
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// 右クリックに対するターミナルの反応を制御します。
	//  - default: コンテキスト メニューを表示します。
	//  - copyPaste: 選択範囲がある場合はコピーし、それ以外の場合は貼り付けます。
	//  - paste: 右クリック時に貼り付けます。
	//  - selectWord: カーソルの下にある単語を選択して、コンテキスト メニューを表示します。
	//  - nothing: 何もせず、ターミナルにイベントを渡します。
	"terminal.integrated.rightClickBehavior": "copyPaste",

	// ターミナルがバッファーに保持する最大行数を制御します。
	"terminal.integrated.scrollback": 1000,

	// ワークベンチではなくターミナルにほとんどのキー バインドをディスパッチし、`terminal.integrated.commandsToSkipShell` をオーバーライドします。これは、精細な調整の代わりに使用できます。
	"terminal.integrated.sendKeybindingsToShell": false,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.linux#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.linux` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.linux": null,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.osx#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.osx` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.osx": null,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.windows#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.windows` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.windows": null,

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.linux#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.linux` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Linux ターミナルで使用するコマンドラインの引数。[シェルの構成についての詳細情報](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.linux": [],

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.osx#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.osx` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Mac OS ターミナルで使用するコマンドラインの引数。[シェルの構成についての詳細情報](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// これは推奨されていません。既定のシェルを構成するための新しい推奨方法は、`terminal.integrated.profiles.windows#` にターミナル プロファイルを作成し、そのプロファイル名を `#terminal.integrated.defaultProfile.windows` の既定値として設定することです。これは現在、新しいプロファイル設定より優先されていますが、将来は変更されます。
	// Windows ターミナルで使用するコマンドラインの引数。[シェルの構成についての詳細情報](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles)。
	"terminal.integrated.shellArgs.windows": [],

	// シェル統合が有効になっている場合は、コマンドごとに装飾を追加します。
	//  - both: 余白 (左) と概要ルーラー (右) にデコレーションを表示する
	//  - gutter: ターミナルの左側に余白のデコレーションを表示する
	//  - overviewRuler: ターミナルの右側に概要ルーラー デコレーションを表示する
	//  - never: 装飾を表示しない
	"terminal.integrated.shellIntegration.decorationsEnabled": "both",

	// 強化されたコマンド追跡や現在の作業ディレクトリの検出などの機能をサポートするために、シェル統合で自動挿入するか否かを決定します。
	// 
	//  シェル統合は、シェルをスタートアップ スクリプトで導入することで機能します。そのスクリプトは、ターミナル内で何が起こっているかについて VS Code 分析情報を提供します。
	// 
	// サポートされているシェル:
	// 
	// - Linux/macOS: bash、pwsh、zsh
	//  - Windows: pwsh
	// 
	// この設定はターミナルが作成されたときにのみ適用されるため、ターミナルを再起動して有効にする必要があります。
	// 
	//  ターミナル プロファイルでカスタム引数が定義されている場合、[complex bash `PROMPT_COMMAND`](https://code.visualstudio.com/docs/editor/integrated-terminal#_complex-bash-promptcommand)、またはその他のサポートされていないセットアップがある場合は、スクリプト挿入が機能しないことがあります。デコレーションを無効化するには、`terminal.integrated.shellIntegrations.decorationsEnabled` をご覧ください
	"terminal.integrated.shellIntegration.enabled": true,

	// ターミナル コマンド履歴に保持する最近使用したコマンドの数を制御します。ターミナル コマンド履歴を無効にするには、[0] に設定します。
	"terminal.integrated.shellIntegration.history": 100,

	// 終了コードがゼロ以外の場合に、"ターミナルの処理が終了しました (終了コード: )" という警告を表示するかどうかを制御します。
	"terminal.integrated.showExitAlert": true,

	// ターミナル出力でリンクにホバーを表示するかどうか。
	"terminal.integrated.showLinkHover": true,

	// アニメーションでターミナルをスクロールするかどうかを制御します。
	"terminal.integrated.smoothScrolling": false,

	// 分割ターミナルの開始点となる作業ディレクトリを制御します。
	//  - workspaceRoot: 新しい分割ターミナルでは、ワークスペースのルートが作業ディレクトリとして使用されます。マルチ ルートのワークスペースでは、どのルート フォルダーを使用するか選択できます。
	//  - initial: 新しい分割ターミナルでは、親ターミナルの起動時の作業ディレクトリが使用されます。
	//  - inherited: macOS と Linux では、新しい分割ターミナルは親ターミナルの作業ディレクトリを使用します。Windows では、初期の動作と同じになります。
	"terminal.integrated.splitCwd": "inherited",

	// 既定でターミナル アイコンに関連付けるテーマ カラー ID。
	"terminal.integrated.tabs.defaultColor": null,

	// 既定でターミナル アイコンに関連付けるcodicon ID。
	//  - add: $(add)
	//  - plus: $(plus)
	//  - gist-new: $(gist-new)
	//  - repo-create: $(repo-create)
	//  - lightbulb: $(lightbulb)
	//  - light-bulb: $(light-bulb)
	//  - repo: $(repo)
	//  - repo-delete: $(repo-delete)
	//  - gist-fork: $(gist-fork)
	//  - repo-forked: $(repo-forked)
	//  - git-pull-request: $(git-pull-request)
	//  - git-pull-request-abandoned: $(git-pull-request-abandoned)
	//  - record-keys: $(record-keys)
	//  - keyboard: $(keyboard)
	//  - tag: $(tag)
	//  - tag-add: $(tag-add)
	//  - tag-remove: $(tag-remove)
	//  - person: $(person)
	//  - person-follow: $(person-follow)
	//  - person-outline: $(person-outline)
	//  - person-filled: $(person-filled)
	//  - git-branch: $(git-branch)
	//  - git-branch-create: $(git-branch-create)
	//  - git-branch-delete: $(git-branch-delete)
	//  - source-control: $(source-control)
	//  - mirror: $(mirror)
	//  - mirror-public: $(mirror-public)
	//  - star: $(star)
	//  - star-add: $(star-add)
	//  - star-delete: $(star-delete)
	//  - star-empty: $(star-empty)
	//  - comment: $(comment)
	//  - comment-add: $(comment-add)
	//  - alert: $(alert)
	//  - warning: $(warning)
	//  - search: $(search)
	//  - search-save: $(search-save)
	//  - log-out: $(log-out)
	//  - sign-out: $(sign-out)
	//  - log-in: $(log-in)
	//  - sign-in: $(sign-in)
	//  - eye: $(eye)
	//  - eye-unwatch: $(eye-unwatch)
	//  - eye-watch: $(eye-watch)
	//  - circle-filled: $(circle-filled)
	//  - primitive-dot: $(primitive-dot)
	//  - close-dirty: $(close-dirty)
	//  - debug-breakpoint: $(debug-breakpoint)
	//  - debug-breakpoint-disabled: $(debug-breakpoint-disabled)
	//  - debug-hint: $(debug-hint)
	//  - primitive-square: $(primitive-square)
	//  - edit: $(edit)
	//  - pencil: $(pencil)
	//  - info: $(info)
	//  - issue-opened: $(issue-opened)
	//  - gist-private: $(gist-private)
	//  - git-fork-private: $(git-fork-private)
	//  - lock: $(lock)
	//  - mirror-private: $(mirror-private)
	//  - close: $(close)
	//  - remove-close: $(remove-close)
	//  - x: $(x)
	//  - repo-sync: $(repo-sync)
	//  - sync: $(sync)
	//  - clone: $(clone)
	//  - desktop-download: $(desktop-download)
	//  - beaker: $(beaker)
	//  - microscope: $(microscope)
	//  - vm: $(vm)
	//  - device-desktop: $(device-desktop)
	//  - file: $(file)
	//  - file-text: $(file-text)
	//  - more: $(more)
	//  - ellipsis: $(ellipsis)
	//  - kebab-horizontal: $(kebab-horizontal)
	//  - mail-reply: $(mail-reply)
	//  - reply: $(reply)
	//  - organization: $(organization)
	//  - organization-filled: $(organization-filled)
	//  - organization-outline: $(organization-outline)
	//  - new-file: $(new-file)
	//  - file-add: $(file-add)
	//  - new-folder: $(new-folder)
	//  - file-directory-create: $(file-directory-create)
	//  - trash: $(trash)
	//  - trashcan: $(trashcan)
	//  - history: $(history)
	//  - clock: $(clock)
	//  - folder: $(folder)
	//  - file-directory: $(file-directory)
	//  - symbol-folder: $(symbol-folder)
	//  - logo-github: $(logo-github)
	//  - mark-github: $(mark-github)
	//  - github: $(github)
	//  - terminal: $(terminal)
	//  - console: $(console)
	//  - repl: $(repl)
	//  - zap: $(zap)
	//  - symbol-event: $(symbol-event)
	//  - error: $(error)
	//  - stop: $(stop)
	//  - variable: $(variable)
	//  - symbol-variable: $(symbol-variable)
	//  - array: $(array)
	//  - symbol-array: $(symbol-array)
	//  - symbol-module: $(symbol-module)
	//  - symbol-package: $(symbol-package)
	//  - symbol-namespace: $(symbol-namespace)
	//  - symbol-object: $(symbol-object)
	//  - symbol-method: $(symbol-method)
	//  - symbol-function: $(symbol-function)
	//  - symbol-constructor: $(symbol-constructor)
	//  - symbol-boolean: $(symbol-boolean)
	//  - symbol-null: $(symbol-null)
	//  - symbol-numeric: $(symbol-numeric)
	//  - symbol-number: $(symbol-number)
	//  - symbol-structure: $(symbol-structure)
	//  - symbol-struct: $(symbol-struct)
	//  - symbol-parameter: $(symbol-parameter)
	//  - symbol-type-parameter: $(symbol-type-parameter)
	//  - symbol-key: $(symbol-key)
	//  - symbol-text: $(symbol-text)
	//  - symbol-reference: $(symbol-reference)
	//  - go-to-file: $(go-to-file)
	//  - symbol-enum: $(symbol-enum)
	//  - symbol-value: $(symbol-value)
	//  - symbol-ruler: $(symbol-ruler)
	//  - symbol-unit: $(symbol-unit)
	//  - activate-breakpoints: $(activate-breakpoints)
	//  - archive: $(archive)
	//  - arrow-both: $(arrow-both)
	//  - arrow-down: $(arrow-down)
	//  - arrow-left: $(arrow-left)
	//  - arrow-right: $(arrow-right)
	//  - arrow-small-down: $(arrow-small-down)
	//  - arrow-small-left: $(arrow-small-left)
	//  - arrow-small-right: $(arrow-small-right)
	//  - arrow-small-up: $(arrow-small-up)
	//  - arrow-up: $(arrow-up)
	//  - bell: $(bell)
	//  - bold: $(bold)
	//  - book: $(book)
	//  - bookmark: $(bookmark)
	//  - debug-breakpoint-conditional-unverified: $(debug-breakpoint-conditional-unverified)
	//  - debug-breakpoint-conditional: $(debug-breakpoint-conditional)
	//  - debug-breakpoint-conditional-disabled: $(debug-breakpoint-conditional-disabled)
	//  - debug-breakpoint-data-unverified: $(debug-breakpoint-data-unverified)
	//  - debug-breakpoint-data: $(debug-breakpoint-data)
	//  - debug-breakpoint-data-disabled: $(debug-breakpoint-data-disabled)
	//  - debug-breakpoint-log-unverified: $(debug-breakpoint-log-unverified)
	//  - debug-breakpoint-log: $(debug-breakpoint-log)
	//  - debug-breakpoint-log-disabled: $(debug-breakpoint-log-disabled)
	//  - briefcase: $(briefcase)
	//  - broadcast: $(broadcast)
	//  - browser: $(browser)
	//  - bug: $(bug)
	//  - calendar: $(calendar)
	//  - case-sensitive: $(case-sensitive)
	//  - check: $(check)
	//  - checklist: $(checklist)
	//  - chevron-down: $(chevron-down)
	//  - drop-down-button: $(drop-down-button)
	//  - chevron-left: $(chevron-left)
	//  - chevron-right: $(chevron-right)
	//  - chevron-up: $(chevron-up)
	//  - chrome-close: $(chrome-close)
	//  - chrome-maximize: $(chrome-maximize)
	//  - chrome-minimize: $(chrome-minimize)
	//  - chrome-restore: $(chrome-restore)
	//  - circle: $(circle)
	//  - circle-outline: $(circle-outline)
	//  - debug-breakpoint-unverified: $(debug-breakpoint-unverified)
	//  - circle-slash: $(circle-slash)
	//  - circuit-board: $(circuit-board)
	//  - clear-all: $(clear-all)
	//  - clippy: $(clippy)
	//  - close-all: $(close-all)
	//  - cloud-download: $(cloud-download)
	//  - cloud-upload: $(cloud-upload)
	//  - code: $(code)
	//  - collapse-all: $(collapse-all)
	//  - color-mode: $(color-mode)
	//  - comment-discussion: $(comment-discussion)
	//  - compare-changes: $(compare-changes)
	//  - credit-card: $(credit-card)
	//  - dash: $(dash)
	//  - dashboard: $(dashboard)
	//  - database: $(database)
	//  - debug-continue: $(debug-continue)
	//  - debug-disconnect: $(debug-disconnect)
	//  - debug-pause: $(debug-pause)
	//  - debug-restart: $(debug-restart)
	//  - debug-start: $(debug-start)
	//  - debug-step-into: $(debug-step-into)
	//  - debug-step-out: $(debug-step-out)
	//  - debug-step-over: $(debug-step-over)
	//  - debug-stop: $(debug-stop)
	//  - debug: $(debug)
	//  - device-camera-video: $(device-camera-video)
	//  - device-camera: $(device-camera)
	//  - device-mobile: $(device-mobile)
	//  - diff-added: $(diff-added)
	//  - diff-ignored: $(diff-ignored)
	//  - diff-modified: $(diff-modified)
	//  - diff-removed: $(diff-removed)
	//  - diff-renamed: $(diff-renamed)
	//  - diff: $(diff)
	//  - discard: $(discard)
	//  - editor-layout: $(editor-layout)
	//  - empty-window: $(empty-window)
	//  - exclude: $(exclude)
	//  - extensions: $(extensions)
	//  - eye-closed: $(eye-closed)
	//  - file-binary: $(file-binary)
	//  - file-code: $(file-code)
	//  - file-media: $(file-media)
	//  - file-pdf: $(file-pdf)
	//  - file-submodule: $(file-submodule)
	//  - file-symlink-directory: $(file-symlink-directory)
	//  - file-symlink-file: $(file-symlink-file)
	//  - file-zip: $(file-zip)
	//  - files: $(files)
	//  - filter: $(filter)
	//  - flame: $(flame)
	//  - fold-down: $(fold-down)
	//  - fold-up: $(fold-up)
	//  - fold: $(fold)
	//  - folder-active: $(folder-active)
	//  - folder-opened: $(folder-opened)
	//  - gear: $(gear)
	//  - gift: $(gift)
	//  - gist-secret: $(gist-secret)
	//  - gist: $(gist)
	//  - git-commit: $(git-commit)
	//  - git-compare: $(git-compare)
	//  - git-merge: $(git-merge)
	//  - github-action: $(github-action)
	//  - github-alt: $(github-alt)
	//  - globe: $(globe)
	//  - grabber: $(grabber)
	//  - graph: $(graph)
	//  - gripper: $(gripper)
	//  - heart: $(heart)
	//  - home: $(home)
	//  - horizontal-rule: $(horizontal-rule)
	//  - hubot: $(hubot)
	//  - inbox: $(inbox)
	//  - issue-closed: $(issue-closed)
	//  - issue-reopened: $(issue-reopened)
	//  - issues: $(issues)
	//  - italic: $(italic)
	//  - jersey: $(jersey)
	//  - json: $(json)
	//  - kebab-vertical: $(kebab-vertical)
	//  - key: $(key)
	//  - law: $(law)
	//  - lightbulb-autofix: $(lightbulb-autofix)
	//  - link-external: $(link-external)
	//  - link: $(link)
	//  - list-ordered: $(list-ordered)
	//  - list-unordered: $(list-unordered)
	//  - live-share: $(live-share)
	//  - loading: $(loading)
	//  - location: $(location)
	//  - mail-read: $(mail-read)
	//  - mail: $(mail)
	//  - markdown: $(markdown)
	//  - megaphone: $(megaphone)
	//  - mention: $(mention)
	//  - milestone: $(milestone)
	//  - mortar-board: $(mortar-board)
	//  - move: $(move)
	//  - multiple-windows: $(multiple-windows)
	//  - mute: $(mute)
	//  - no-newline: $(no-newline)
	//  - note: $(note)
	//  - octoface: $(octoface)
	//  - open-preview: $(open-preview)
	//  - package: $(package)
	//  - paintcan: $(paintcan)
	//  - pin: $(pin)
	//  - play: $(play)
	//  - run: $(run)
	//  - plug: $(plug)
	//  - preserve-case: $(preserve-case)
	//  - preview: $(preview)
	//  - project: $(project)
	//  - pulse: $(pulse)
	//  - question: $(question)
	//  - quote: $(quote)
	//  - radio-tower: $(radio-tower)
	//  - reactions: $(reactions)
	//  - references: $(references)
	//  - refresh: $(refresh)
	//  - regex: $(regex)
	//  - remote-explorer: $(remote-explorer)
	//  - remote: $(remote)
	//  - remove: $(remove)
	//  - replace-all: $(replace-all)
	//  - replace: $(replace)
	//  - repo-clone: $(repo-clone)
	//  - repo-force-push: $(repo-force-push)
	//  - repo-pull: $(repo-pull)
	//  - repo-push: $(repo-push)
	//  - report: $(report)
	//  - request-changes: $(request-changes)
	//  - rocket: $(rocket)
	//  - root-folder-opened: $(root-folder-opened)
	//  - root-folder: $(root-folder)
	//  - rss: $(rss)
	//  - ruby: $(ruby)
	//  - save-all: $(save-all)
	//  - save-as: $(save-as)
	//  - save: $(save)
	//  - screen-full: $(screen-full)
	//  - screen-normal: $(screen-normal)
	//  - search-stop: $(search-stop)
	//  - server: $(server)
	//  - settings-gear: $(settings-gear)
	//  - settings: $(settings)
	//  - shield: $(shield)
	//  - smiley: $(smiley)
	//  - sort-precedence: $(sort-precedence)
	//  - split-horizontal: $(split-horizontal)
	//  - split-vertical: $(split-vertical)
	//  - squirrel: $(squirrel)
	//  - star-full: $(star-full)
	//  - star-half: $(star-half)
	//  - symbol-class: $(symbol-class)
	//  - symbol-color: $(symbol-color)
	//  - symbol-customcolor: $(symbol-customcolor)
	//  - symbol-constant: $(symbol-constant)
	//  - symbol-enum-member: $(symbol-enum-member)
	//  - symbol-field: $(symbol-field)
	//  - symbol-file: $(symbol-file)
	//  - symbol-interface: $(symbol-interface)
	//  - symbol-keyword: $(symbol-keyword)
	//  - symbol-misc: $(symbol-misc)
	//  - symbol-operator: $(symbol-operator)
	//  - symbol-property: $(symbol-property)
	//  - wrench: $(wrench)
	//  - wrench-subaction: $(wrench-subaction)
	//  - symbol-snippet: $(symbol-snippet)
	//  - tasklist: $(tasklist)
	//  - telescope: $(telescope)
	//  - text-size: $(text-size)
	//  - three-bars: $(three-bars)
	//  - thumbsdown: $(thumbsdown)
	//  - thumbsup: $(thumbsup)
	//  - tools: $(tools)
	//  - triangle-down: $(triangle-down)
	//  - triangle-left: $(triangle-left)
	//  - triangle-right: $(triangle-right)
	//  - triangle-up: $(triangle-up)
	//  - twitter: $(twitter)
	//  - unfold: $(unfold)
	//  - unlock: $(unlock)
	//  - unmute: $(unmute)
	//  - unverified: $(unverified)
	//  - verified: $(verified)
	//  - versions: $(versions)
	//  - vm-active: $(vm-active)
	//  - vm-outline: $(vm-outline)
	//  - vm-running: $(vm-running)
	//  - watch: $(watch)
	//  - whitespace: $(whitespace)
	//  - whole-word: $(whole-word)
	//  - window: $(window)
	//  - word-wrap: $(word-wrap)
	//  - zoom-in: $(zoom-in)
	//  - zoom-out: $(zoom-out)
	//  - list-filter: $(list-filter)
	//  - list-flat: $(list-flat)
	//  - list-selection: $(list-selection)
	//  - selection: $(selection)
	//  - list-tree: $(list-tree)
	//  - debug-breakpoint-function-unverified: $(debug-breakpoint-function-unverified)
	//  - debug-breakpoint-function: $(debug-breakpoint-function)
	//  - debug-breakpoint-function-disabled: $(debug-breakpoint-function-disabled)
	//  - debug-stackframe-active: $(debug-stackframe-active)
	//  - circle-small-filled: $(circle-small-filled)
	//  - debug-stackframe-dot: $(debug-stackframe-dot)
	//  - debug-stackframe: $(debug-stackframe)
	//  - debug-stackframe-focused: $(debug-stackframe-focused)
	//  - debug-breakpoint-unsupported: $(debug-breakpoint-unsupported)
	//  - symbol-string: $(symbol-string)
	//  - debug-reverse-continue: $(debug-reverse-continue)
	//  - debug-step-back: $(debug-step-back)
	//  - debug-restart-frame: $(debug-restart-frame)
	//  - call-incoming: $(call-incoming)
	//  - call-outgoing: $(call-outgoing)
	//  - menu: $(menu)
	//  - expand-all: $(expand-all)
	//  - feedback: $(feedback)
	//  - group-by-ref-type: $(group-by-ref-type)
	//  - ungroup-by-ref-type: $(ungroup-by-ref-type)
	//  - account: $(account)
	//  - bell-dot: $(bell-dot)
	//  - debug-console: $(debug-console)
	//  - library: $(library)
	//  - output: $(output)
	//  - run-all: $(run-all)
	//  - sync-ignored: $(sync-ignored)
	//  - pinned: $(pinned)
	//  - github-inverted: $(github-inverted)
	//  - debug-alt: $(debug-alt)
	//  - server-process: $(server-process)
	//  - server-environment: $(server-environment)
	//  - pass: $(pass)
	//  - stop-circle: $(stop-circle)
	//  - play-circle: $(play-circle)
	//  - record: $(record)
	//  - debug-alt-small: $(debug-alt-small)
	//  - vm-connect: $(vm-connect)
	//  - cloud: $(cloud)
	//  - merge: $(merge)
	//  - export: $(export)
	//  - graph-left: $(graph-left)
	//  - magnet: $(magnet)
	//  - notebook: $(notebook)
	//  - redo: $(redo)
	//  - check-all: $(check-all)
	//  - pinned-dirty: $(pinned-dirty)
	//  - pass-filled: $(pass-filled)
	//  - circle-large-filled: $(circle-large-filled)
	//  - circle-large: $(circle-large)
	//  - circle-large-outline: $(circle-large-outline)
	//  - combine: $(combine)
	//  - gather: $(gather)
	//  - table: $(table)
	//  - variable-group: $(variable-group)
	//  - type-hierarchy: $(type-hierarchy)
	//  - type-hierarchy-sub: $(type-hierarchy-sub)
	//  - type-hierarchy-super: $(type-hierarchy-super)
	//  - git-pull-request-create: $(git-pull-request-create)
	//  - run-above: $(run-above)
	//  - run-below: $(run-below)
	//  - notebook-template: $(notebook-template)
	//  - debug-rerun: $(debug-rerun)
	//  - workspace-trusted: $(workspace-trusted)
	//  - workspace-untrusted: $(workspace-untrusted)
	//  - workspace-unspecified: $(workspace-unspecified)
	//  - terminal-cmd: $(terminal-cmd)
	//  - terminal-debian: $(terminal-debian)
	//  - terminal-linux: $(terminal-linux)
	//  - terminal-powershell: $(terminal-powershell)
	//  - terminal-tmux: $(terminal-tmux)
	//  - terminal-ubuntu: $(terminal-ubuntu)
	//  - terminal-bash: $(terminal-bash)
	//  - arrow-swap: $(arrow-swap)
	//  - copy: $(copy)
	//  - person-add: $(person-add)
	//  - filter-filled: $(filter-filled)
	//  - wand: $(wand)
	//  - debug-line-by-line: $(debug-line-by-line)
	//  - inspect: $(inspect)
	//  - layers: $(layers)
	//  - layers-dot: $(layers-dot)
	//  - layers-active: $(layers-active)
	//  - compass: $(compass)
	//  - compass-dot: $(compass-dot)
	//  - compass-active: $(compass-active)
	//  - azure: $(azure)
	//  - issue-draft: $(issue-draft)
	//  - git-pull-request-closed: $(git-pull-request-closed)
	//  - git-pull-request-draft: $(git-pull-request-draft)
	//  - debug-all: $(debug-all)
	//  - debug-coverage: $(debug-coverage)
	//  - run-errors: $(run-errors)
	//  - folder-library: $(folder-library)
	//  - debug-continue-small: $(debug-continue-small)
	//  - beaker-stop: $(beaker-stop)
	//  - graph-line: $(graph-line)
	//  - graph-scatter: $(graph-scatter)
	//  - pie-chart: $(pie-chart)
	//  - bracket: $(bracket)
	//  - bracket-dot: $(bracket-dot)
	//  - bracket-error: $(bracket-error)
	//  - lock-small: $(lock-small)
	//  - azure-devops: $(azure-devops)
	//  - verified-filled: $(verified-filled)
	//  - newline: $(newline)
	//  - layout: $(layout)
	//  - layout-activitybar-left: $(layout-activitybar-left)
	//  - layout-activitybar-right: $(layout-activitybar-right)
	//  - layout-panel-left: $(layout-panel-left)
	//  - layout-panel-center: $(layout-panel-center)
	//  - layout-panel-justify: $(layout-panel-justify)
	//  - layout-panel-right: $(layout-panel-right)
	//  - layout-panel: $(layout-panel)
	//  - layout-sidebar-left: $(layout-sidebar-left)
	//  - layout-sidebar-right: $(layout-sidebar-right)
	//  - layout-statusbar: $(layout-statusbar)
	//  - layout-menubar: $(layout-menubar)
	//  - layout-centered: $(layout-centered)
	//  - layout-sidebar-right-off: $(layout-sidebar-right-off)
	//  - layout-panel-off: $(layout-panel-off)
	//  - layout-sidebar-left-off: $(layout-sidebar-left-off)
	//  - target: $(target)
	//  - indent: $(indent)
	//  - record-small: $(record-small)
	//  - error-small: $(error-small)
	//  - arrow-circle-down: $(arrow-circle-down)
	//  - arrow-circle-left: $(arrow-circle-left)
	//  - arrow-circle-right: $(arrow-circle-right)
	//  - arrow-circle-up: $(arrow-circle-up)
	//  - heart-filled: $(heart-filled)
	//  - map: $(map)
	//  - map-filled: $(map-filled)
	//  - circle-small: $(circle-small)
	//  - bell-slash: $(bell-slash)
	//  - bell-slash-dot: $(bell-slash-dot)
	//  - comment-unresolved: $(comment-unresolved)
	//  - git-pull-request-go-to-changes: $(git-pull-request-go-to-changes)
	//  - git-pull-request-new-changes: $(git-pull-request-new-changes)
	//  - search-fuzzy: $(search-fuzzy)
	//  - comment-draft: $(comment-draft)
	//  - dialog-error: $(dialog-error)
	//  - dialog-warning: $(dialog-warning)
	//  - dialog-info: $(dialog-info)
	//  - dialog-close: $(dialog-close)
	//  - tree-item-expanded: $(tree-item-expanded)
	//  - tree-filter-on-type-on: $(tree-filter-on-type-on)
	//  - tree-filter-on-type-off: $(tree-filter-on-type-off)
	//  - tree-filter-clear: $(tree-filter-clear)
	//  - tree-item-loading: $(tree-item-loading)
	//  - menu-selection: $(menu-selection)
	//  - menu-submenu: $(menu-submenu)
	//  - menubar-more: $(menubar-more)
	//  - scrollbar-button-left: $(scrollbar-button-left)
	//  - scrollbar-button-right: $(scrollbar-button-right)
	//  - scrollbar-button-up: $(scrollbar-button-up)
	//  - scrollbar-button-down: $(scrollbar-button-down)
	//  - toolbar-more: $(toolbar-more)
	//  - quick-input-back: $(quick-input-back)
	"terminal.integrated.tabs.defaultIcon": "terminal",

	// タイトルの右側に表示されるターミナルの説明を制御します。変数は以下のコンテキストに基づいて置換されます。
	// - `${cwd}`: 現在のターミナルの作業ディレクトリ
	// - `${cwdFolder}`: 現在のターミナルの作業ディレクトリ。マルチ ルート ワークスペースの場合は表示され、または初期作業ディレクトリと値が異なる場合にはシングル ルート ワークスペースに表示されます。Windows では、シェル統合が有効になっている場合にのみ表示されます。
	// - `${workspaceFolder}`: ターミナルを起動したワークスペース
	// - `${local}`: リモート ワークスペース内のローカル ターミナルを示す
	// - `${process}`: ターミナル プロセスの名前
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (" - ") を表示します。
	// - `${sequence}`: プロセスによってターミナルに指定された名前
	// - `${task}`: このターミナルがタスクに関連付けられていることを示す
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// ターミナル タブの状態がアニメーションをサポートするかどうかを制御します (例: 進行中のタスク)。
	"terminal.integrated.tabs.enableAnimation": true,

	// ターミナルの側面にターミナル タブを一覧として表示するかどうかを制御します。これを無効にすると、代わりにドロップダウンが表示されます。
	"terminal.integrated.tabs.enabled": true,

	// シングル クリックでタブのターミナルにフォーカスするかどうかを制御します。
	//  - singleClick: ターミナル タブをクリックした場合にターミナルにフォーカス
	//  - doubleClick: ターミナル タブをダブルクリックした場合にターミナルにフォーカス
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// ターミナル タブ ビューが特定の条件下で非表示になるかどうかを制御します。
	//  - never: ターミナル タブ ビューを常に表示する
	//  - singleTerminal: ターミナルを1つだけ開いたときに、ターミナル タブ ビューを非表示にします
	//  - singleGroup: ターミナル グループを 1 つだけ開いた場合に、ターミナル タブ ビューを非表示にします
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// ターミナル タブの場所を、実際のターミナルの左または右のいずれかに制御します。
	//  - left: ターミナルの左側にターミナル タブ ビューを表示する
	//  - right: ターミナルの右側にターミナル タブ ビューを表示する
	"terminal.integrated.tabs.location": "right",

	// `terminal.integrated.tabs.title` と `terminal.integrated.tabs.title` で使用される区切り記号。
	"terminal.integrated.tabs.separator": " - ",

	// 新しいターミナル ボタンの横にターミナルの分割ボタンと強制終了ボタンを表示するかどうかを制御します。
	//  - always: 常にアクションを表示する
	//  - singleTerminal: 唯一のターミナルが開かれている場合にアクションを表示する
	//  - singleTerminalOrNarrow: 唯一のターミナルが開かれているか、タブ ビューがその狭義のテキストなし状態である場合にアクションを表示する
	//  - never: アクションを表示しない
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// アクティブなターミナル情報を表示します。これは、タブ内にタイトルが表示されない場合に特に役立ちます。
	//  - always: アクティブなターミナルを常に表示する
	//  - singleTerminal: アクティブなターミナルが開かれている唯一のターミナルを表示する
	//  - singleTerminalOrNarrow: アクティブなターミナルが開かれている唯一のターミナルを表示するか、タブ ビューがその狭義のテキストなし状態である場合
	//  - never: アクティブなターミナルを常に非表示にする
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// ターミナル タイトルを制御します。変数は以下のコンテキストに基づいて置換されます。
	// - `${cwd}`: 現在のターミナルの作業ディレクトリ
	// - `${cwdFolder}`: 現在のターミナルの作業ディレクトリ。マルチ ルート ワークスペースの場合は表示され、または初期作業ディレクトリと値が異なる場合にはシングル ルート ワークスペースに表示されます。Windows では、シェル統合が有効になっている場合にのみ表示されます。
	// - `${workspaceFolder}`: ターミナルを起動したワークスペース
	// - `${local}`: リモート ワークスペース内のローカル ターミナルを示す
	// - `${process}`: ターミナル プロセスの名前
	// - `${separator}`: 値か固定のテキストで囲われたとき、条件付きの区切り記号 (" - ") を表示します。
	// - `${sequence}`: プロセスによってターミナルに指定された名前
	// - `${task}`: このターミナルがタスクに関連付けられていることを示す
	"terminal.integrated.tabs.title": "${process}",

	// ターミナルでの文字幅を評価するときに使用する Unicode のバージョンを制御します。絵文字や他のワイド文字で占める領域の大きさが正しくない場合や、バックスペースによる削除の量が多すぎるか少なすぎる場合には、この設定を微調整してみてください。
	//  - 6: バージョン 6 の Unicode。これは古いバージョンであり、古いシステムで適切に動作するはずです。
	//  - 11: バージョン 11 の Unicode。このバージョンでは、Unicode の最新バージョンを使用する最新のシステムでのサポートが向上しています。
	"terminal.integrated.unicodeVersion": "11",

	// ターミナルのドロップダウンに WSL ディストリビューションを表示するかどうかを制御します
	"terminal.integrated.useWslProfiles": true,

	// Windows ターミナル プロセス通信に ConPTY を使用するかどうかを指定します (Windows 10 のビルド番号 18309 以上が必要です)。これが false の場合は、winpty が使用されます。
	"terminal.integrated.windowsEnableConpty": true,

	// ダブルクリックによる単語選択機能で単語区切り記号として扱われるすべての文字を含む文字列。
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

	// ファイルを開くとき、問題ビューに自動的にそのファイルを表示するかどうかを制御します
	"problems.autoReveal": true,

	// ファイルとフォルダーのエラーと警告を表示します。
	"problems.decorations.enabled": true,

	// 問題ビューの既定の表示モードを制御します。
	"problems.defaultViewMode": "tree",

	// 有効にすると、現在発生している問題がステータス バーに表示されます。
	"problems.showCurrentInStatus": false,

	// 問題のナビゲート順序を制御します。
	//  - severity: 重大度順に並べ替えられた問題をナビゲートする
	//  - position: 位置順に並べ替えられた問題をナビゲートする
	"problems.sortOrder": "severity",

	// ナビゲーション階層リンクを有効/無効にします。
	"breadcrumbs.enabled": true,

	// 階層リンク ビューでファイル パスをどのように表示するかどうかを制御します。
	//  - on: 階層リンク ビューでファイル パスを表示します。
	//  - off: 階層リンク ビューでファイル パスを表示しません。
	//  - last: 階層リンク ビューでファイル パスの最後の要素のみを表示します。
	"breadcrumbs.filePath": "on",

	// 階層リンク項目をアイコンでレンダリングします。
	"breadcrumbs.icons": true,

	// 有効にすると、階層リンクに '配列' 記号が表示されます。
	"breadcrumbs.showArrays": true,

	// 有効にすると、階層リンクに `ブール型` 記号が表示されます。
	"breadcrumbs.showBooleans": true,

	// 有効にすると、階層リンクに `クラス` 記号が表示されます。
	"breadcrumbs.showClasses": true,

	// 有効にすると、階層リンクに `定数` の記号が表示されます。
	"breadcrumbs.showConstants": true,

	// 有効にすると、階層リンクに 'コンストラクター' 記号が表示されます。
	"breadcrumbs.showConstructors": true,

	// 有効にすると、階層リンクに `enumMember` 記号が表示されます。
	"breadcrumbs.showEnumMembers": true,

	// 有効にすると、階層リンクに '列挙型' 記号が表示されます。
	"breadcrumbs.showEnums": true,

	// 有効にすると、階層リンクに 'イベント' 記号が表示されます。
	"breadcrumbs.showEvents": true,

	// 有効にすると、階層リンクに `フィールド` 記号が表示されます。
	"breadcrumbs.showFields": true,

	// 有効にすると、階層リンクに `ファイル` 記号が表示されます。
	"breadcrumbs.showFiles": true,

	// 有効にすると、階層リンクに '関数' 記号が表示されます。
	"breadcrumbs.showFunctions": true,

	// 有効にすると、階層リンクに `インターフェイス` 記号が表示されます。
	"breadcrumbs.showInterfaces": true,

	// 有効にすると、階層リンクに `キー` 記号が表示されます。
	"breadcrumbs.showKeys": true,

	// 有効にすると、階層リンクに `メソッド` 記号が表示されます。
	"breadcrumbs.showMethods": true,

	// 有効にすると、階層リンクに `モジュール` 記号が表示されます。
	"breadcrumbs.showModules": true,

	// 有効にすると、階層リンクに `名前空間` 記号が表示されます。
	"breadcrumbs.showNamespaces": true,

	// 有効にすると、階層リンクに `null` 記号が表示されます。
	"breadcrumbs.showNull": true,

	// 有効にすると、階層リンクに `数値` 記号が表示されます。
	"breadcrumbs.showNumbers": true,

	// 有効にすると、階層リンクに `オブジェクト` 記号が表示されます。
	"breadcrumbs.showObjects": true,

	// 有効にすると、階層リンクに `演算子` 記号が表示されます。
	"breadcrumbs.showOperators": true,

	// 有効にすると、階層リンクに 'パッケージ' 記号が表示されます。
	"breadcrumbs.showPackages": true,

	// 有効にすると、階層リンクに 'プロパティ' 記号が表示されます。
	"breadcrumbs.showProperties": true,

	// 有効にすると、階層リンクに `文字列` 記号が表示されます。
	"breadcrumbs.showStrings": true,

	// 有効にすると、階層リンクに `構造体` 記号が表示されます。
	"breadcrumbs.showStructs": true,

	// 有効にすると、階層リンクに 'typeParameter' 記号が表示されます。
	"breadcrumbs.showTypeParameters": true,

	// 有効にすると、階層リンクに `変数` 記号が表示されます。
	"breadcrumbs.showVariables": true,

	// 階層リンク ビューでシンボルをどのように表示するかどうかを制御します。
	//  - on: 階層リンク ビューですべてのシンボルを表示します。
	//  - off: 階層リンク ビューでシンボルを表示しません。
	//  - last: 階層リンク ビューで現在のシンボルのみを表示します。
	"breadcrumbs.symbolPath": "on",

	// 階層リンクのアウトライン ビューでシンボルを並び替える方法を制御します。
	//  - position: ファイル内での位置順にシンボルのアウトラインを表示します。
	//  - name: アルファベット順でシンボル アウトラインを表示します。
	//  - type: シンボルの種類の順番でシンボル アウトラインを表示します。
	"breadcrumbs.symbolSortOrder": "position",

	// この設定が false の場合、新しい設定の値に関係なくテレメトリは送信されません。`telemetry.telemetryLevel`設定に結合されているため、非推奨になりました。
	// クラッシュ レポートの収取を有効にします。これにより、安定性が向上します。
	// このオプションを有効にするには、再起動が必要です。
	"telemetry.enableCrashReporter": true,

	// この設定が false の場合、新しい設定の値に関係なくテレメトリは送信されません。`telemetry.telemetryLevel`設定を優先して非推奨になりました。
	// 診断データの収集を有効にします。これにより、Visual Studio Code の実行状況と改善が必要な箇所について理解を深めることができます。収集する情報とプライバシーに関する声明についての [Read more] (https://go.microsoft.com/fwlink/?LinkId=786907) をご覧ください。
	"telemetry.enableTelemetry": true,

	// 
	// Visual Studio Code テレメトリ、ファースト パーティ拡張テレメトリ機能、および参加しているサード パーティの拡張機能テレメトリを制御します。一部のサード パーティの拡張機能では、この設定が考慮されない場合があります。確認するには、特定の拡張機能のドキュメントを参照してください。テレメトリにより、Visual Studio Code のパフォーマンス、改善が必要な場所、および機能の使用方法について理解しやすくなります。 [収集するデータ](https://aka.ms/vscode-telemetry) と[プライバシーに関する声明](https://go.microsoft.com/fwlink/?LinkId=786907) を参照してください。 クラッシュ レポートの変更を有効にするには、アプリケーションを完全に再起動する必要があります。
	// 
	// &nbsp;
	// 
	// 次の表は、各設定で送信されるデータの概要を示しています。
	// 
	// |       | クラッシュ レポート | エラー テレメトリ | 使用状況データ |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****注:*** この設定が 'off' の場合、他のテレメトリ設定に関係なくテレメトリは送信されません。この設定が 'off' 以外に設定されていて、非推奨の設定でテレメトリが無効になっている場合、テレメトリは送信されません。*
	// 
	//  - all: 使用状況データ、エラー、クラッシュ レポートを送信します。
	//  - error: 一般的なエラー テレメトリとクラッシュ レポートを送信します。
	//  - crash: OS レベルのクラッシュ レポートを送信します。
	//  - off: すべての製品テレメトリを無効にします。
	"telemetry.telemetryLevel": "all",

	// アウトライン項目を折りたたむか展開するかを制御します。
	//  - alwaysCollapse: すべての項目を折りたたむ。
	//  - alwaysExpand: すべての項目を展開します。
	"outline.collapseItems": "alwaysExpand",

	// アイコン付きでアウトライン要素を表示します。
	"outline.icons": true,

	// アウトライン要素のエラーと警告にはバッジを使用します。
	"outline.problems.badges": true,

	// アウトライン要素のエラーと警告には色を使用します。
	"outline.problems.colors": true,

	// アウトライン要素にエラーと警告を表示します。
	"outline.problems.enabled": true,

	// 有効にすると、アウトラインに `配列` 記号が表示されます。
	"outline.showArrays": true,

	// 有効にすると、アウトラインに `ブール型` 記号が表示されます。
	"outline.showBooleans": true,

	// 有効にすると、アウトラインに `クラス` 記号が表示されます。
	"outline.showClasses": true,

	// 有効にすると、アウトラインに `定数` 記号が表示されます。
	"outline.showConstants": true,

	// 有効にすると、アウトラインに `コンストラクター` 記号が表示されます。
	"outline.showConstructors": true,

	// 有効にすると、アウトラインに `enumMember` 記号が表示されます。
	"outline.showEnumMembers": true,

	// 有効にすると、アウトラインに `列挙型` 記号が表示されます。
	"outline.showEnums": true,

	// 有効にすると、アウトラインに `イベント` 記号が表示されます。
	"outline.showEvents": true,

	// 有効にすると、アウトラインに `フィールド` 記号が表示されます。
	"outline.showFields": true,

	// 有効にすると、アウトラインに `ファイル` 記号が表示されます。
	"outline.showFiles": true,

	// 有効にすると、アウトラインに `関数` 記号が表示されます。
	"outline.showFunctions": true,

	// 有効にすると、アウトラインに `インターフェイス` 記号が表示されます。
	"outline.showInterfaces": true,

	// 有効にすると、アウトラインに `キー` 記号が表示されます。
	"outline.showKeys": true,

	// 有効にすると、アウトラインに `メソッド` 記号が表示されます。
	"outline.showMethods": true,

	// 有効にすると、アウトラインに `モジュール` 記号が表示されます。
	"outline.showModules": true,

	// 有効にすると、アウトラインに `名前空間` 記号が表示されます。
	"outline.showNamespaces": true,

	// 有効にすると、アウトラインに `null` 記号が表示されます。
	"outline.showNull": true,

	// 有効にすると、アウトラインに `数値` 記号が表示されます。
	"outline.showNumbers": true,

	// 有効にすると、アウトラインに `オブジェクト` 記号が表示されます。
	"outline.showObjects": true,

	// 有効にすると、アウトラインに `演算子` 記号が表示されます。
	"outline.showOperators": true,

	// 有効にすると、アウトラインに `パッケージ` 記号が表示されます。
	"outline.showPackages": true,

	// 有効にすると、アウトラインに `プロパティ` 記号が表示されます。
	"outline.showProperties": true,

	// 有効にすると、アウトラインに `文字列` 記号が表示されます。
	"outline.showStrings": true,

	// 有効にすると、アウトラインに `構造体` 記号が表示されます。
	"outline.showStructs": true,

	// 有効にすると、アウトラインに `typeParameter` 記号が表示されます。
	"outline.showTypeParameters": true,

	// 有効にすると、アウトラインに `変数` 記号が表示されます。
	"outline.showVariables": true,

	// 試験段階。リストの最後までスクロールしたとき、タイムライン ビューで次のページの項目を読み込むかどうかを制御します。
	"timeline.pageOnScroll": false,

	// タイムライン ビューで、既定の場合と、さらに項目を読み込む場合に表示する項目数。'null' (既定値) に設定すると、タイムライン ビューの表示可能な領域に基づいて自動的にページ サイズが選択されます。
	"timeline.pageSize": null,

	// csharp 言語が優先される設定を構成します。
	"[csharp]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// css 言語が優先される設定を構成します。
	"[css]":  {
		"editor.suggest.insertMode": "replace"
	},

	// dockercompose 言語が優先される設定を構成します。
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// dockerfile 言語が優先される設定を構成します。
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// git-commit 言語が優先される設定を構成します。
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// git-rebase 言語が優先される設定を構成します。
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// go 言語が優先される設定を構成します。
	"[go]":  {
		"editor.insertSpaces": false
	},

	// handlebars 言語が優先される設定を構成します。
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// html 言語が優先される設定を構成します。
	"[html]":  {
		"editor.suggest.insertMode": "replace"
	},

	// javascript 言語が優先される設定を構成します。
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// json 言語が優先される設定を構成します。
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// jsonc 言語が優先される設定を構成します。
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace"
	},

	// less 言語が優先される設定を構成します。
	"[less]":  {
		"editor.suggest.insertMode": "replace"
	},

	// makefile 言語が優先される設定を構成します。
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// markdown 言語が優先される設定を構成します。
	"[markdown]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false,
		"editor.wordWrap": "on",
		"editor.quickSuggestions": {
				"comments": "off",
				"strings": "off",
				"other": "off"
		}
	},

	// plaintext 言語が優先される設定を構成します。
	"[plaintext]":  {
		"editor.unicodeHighlight.ambiguousCharacters": false,
		"editor.unicodeHighlight.invisibleCharacters": false
	},

	// scss 言語が優先される設定を構成します。
	"[scss]":  {
		"editor.suggest.insertMode": "replace"
	},

	// search-result 言語が優先される設定を構成します。
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// shellscript 言語が優先される設定を構成します。
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// yaml 言語が優先される設定を構成します。
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced"
	},

	// 差分レビュー モードでフォーカスが削除された行に移動したときに音を鳴らします
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.diffLineDeleted": "auto",

	// 差分レビュー モードでフォーカスが挿入された行に移動したときに音を鳴らします
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.diffLineInserted": "auto",

	// Deprecated. Use the specific setting for each audio cue instead (`audioCues.*`).
	// 
	"audioCues.enabled": null,

	// アクティブ行にブレークポイントがある場合、音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.lineHasBreakpoint": "auto",

	// アクティブ行にエラーがある場合、音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.lineHasError": "auto",

	// アクティブ行に、展開可能だが、折りたたまれた領域がある場合、音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.lineHasFoldedArea": "auto",

	// アクティブ行にインライン候補が発生した場合、音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.lineHasInlineSuggestion": "auto",

	// アクティブ行に警告がある場合、音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.lineHasWarning": "off",

	// インレイ ヒントのないインレイ ヒントを含む行を読み上げようとすると、サウンドが再生されます。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.noInlayHints": "auto",

	// ノートブック セルの実行が正常に完了したときに音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.notebookCellCompleted": "auto",

	// ノートブック セルの実行に失敗したときに音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.notebookCellFailed": "auto",

	// デバッガーがブレークポイントで停止したときに、音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.onDebugBreak": "auto",

	// タスクの終了時に音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.taskCompleted": "auto",

	// タスクが失敗したときに音を鳴らします (ゼロ以外の終了コード)。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.taskFailed": "auto",

	// ターミナルのクイック修正が利用可能になったときに音を鳴らします。
	//  - auto: スクリーン リーダーが接続されたときにオーディオ キューを有効にします。
	//  - on: オーディオ キューを有効にします。
	//  - off: オーディオ キューを無効にします。
	"audioCues.terminalQuickFix": "auto",

	// オーディオ キューの音量 (パーセント単位) (0 - 100)。
	"audioCues.volume": 70,

	// リモート トンネル アクセスに登録されている名前。設定されていない場合は、ホスト名が使用されます。
	"remote.tunnels.access.hostNameOverride": "",

	// 有効にすると、新しい実行中のプロセスが検出され、リッスンしているポートが自動的に転送されます。この設定を無効にしても、すべてのポートの転送を防ぐわけではありません。無効にした場合でも、拡張機能は引き続きポートの転送が可能であり、一部の URL を開ことにより、ポートが引き続き転送されます。
	"remote.autoForwardPorts": true,

	// `remote.autoForwardPorts` が true の場合にポートが自動的に転送されるソースを設定します。Windows と Mac のリモートでは、'process' オプションは効果がなく、'output' が使用されます。有効化するには、再読み込みが必要です。
	//  - process: ポートは、開始済みで、ポートが含まれるプロセスを監視することによって検出されたときに自動的に転送されます。
	//  - output: ポートは、ターミナルとデバッグの出力を読み取ることによって検出されたときに自動的に転送されます。ポートを使用するすべてのプロセスで統合ターミナルまたはデバッグ コンソールに出力されるわけではないため、一部のポートは見逃されます。出力に基づいて転送されたポートは、再度読み込むか、ユーザーがポート ビューでポートを閉じない限り、"転送を解除" されることはありません。
	"remote.autoForwardPortsSource": "process",

	// 有効にすると、拡張機能がローカルにダウンロードされ、リモート上にインストールされます。
	"remote.downloadExtensionsLocally": false,

	// 拡張子の種類をオーバーライドします。'ui' 拡張機能はローカル マシンでインストールされて実行されますが、'workspace' 拡張機能はリモートで実行されます。この設定を使用して拡張機能の既定の種類をオーバーライドすることで、その拡張機能をローカルまたはリモートのいずれかでインストールして有効にするかどうかを指定します。
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// ポート転送に使用するローカル ホスト名を指定します。
	"remote.localPortHost": "localhost",

	// 設定 `remote.portsAttributes` からプロパティを取得しないすべてのポートに適用される既定のプロパティを設定します。例:
	// 
	// '''
	// {
	//  "onAutoForward": "ignore"
	// }
	// '''
	"remote.otherPortsAttributes": {},

	// 特定のポート番号が転送されるときに適用されるプロパティを設定します。例:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// ワークスペースで転送したポートを復元します。
	"remote.restoreForwardedPorts": true,

	// 
	//  - smart: 既定の差分アルゴリズムを使用します。
	//  - experimental: 試験的な差分アルゴリズムを使用します。
	"mergeEditor.diffAlgorithm": "experimental",

	// Controls if deletions in base or one of the inputs should be indicated by a vertical bar.
	"mergeEditor.showDeletionMarkers": true,

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
	// In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
	// See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
	"emmet.extensionsPath": [],

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `editor.quickSuggestions` to `inline` or `off` for the `other` item.
	"emmet.useInlineCompletions": false,

	// Variables to be used in Emmet snippets.
	"emmet.variables": {},

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// Prefix used when creating a new branch.
	"git.branchPrefix": "",

	// List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `git.branchProtectionPrompt`  setting.
	"git.branchProtection": [],

	// Controls whether a prompt is being shown before changes are committed to a protected branch.
	//  - alwaysCommit: Always commit changes to the protected branch.
	//  - alwaysCommitToNewBranch: Always commit changes to a new branch.
	//  - alwaysPrompt: Always prompt before changes are committed to a protected branch.
	"git.branchProtectionPrompt": "alwaysPrompt",

	// List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.
	//  - adjectives: A random adjective
	//  - animals: A random animal name
	//  - colors: A random color name
	//  - numbers: A random number between 100 and 999
	"git.branchRandomName.dictionary": [
		"adjectives",
		"animals"
	],

	// Controls whether a random name is generated when creating a new branch.
	"git.branchRandomName.enable": false,

	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.
	"git.branchWhitespaceChar": "-",

	// Controls what type of git refs are listed when running `Checkout to...`.
	//  - local: Local branches
	//  - tags: Tags
	//  - remote: Remote branches
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.
	"git.closeDiffOnOperation": false,

	// List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).
	"git.commandsToLog": [],

	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Controls whether to ask for confirmation before committing without verification.
	"git.confirmNoVerifyCommit": true,

	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,

	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,

	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Enables commit signing with GPG or X.509.
	"git.enableCommitSigning": false,

	// Whether git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,

	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,

	// Follow push all tags when running the sync command.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// List of git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,

	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,

	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Open the merge editor for files that are currently under conflict.
	"git.mergeEditor": false,

	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Controls whether to optimistically update the state of the Source Control view after running git commands.
	"git.optimisticUpdate": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,

	// Run a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'git push' after a successful commit.
	//  - sync: Run 'git pull' and 'git push' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",

	// Prune when fetching.
	"git.pruneOnFetch": false,

	// Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out.
	"git.pullBeforeCheckout": false,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// Remember the last git command that ran after a commit.
	"git.rememberPostCommitCommand": false,

	// List of folders that are ignored while scanning for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`.
	"git.repositoryScanIgnoredFolders": [
		"node_modules"
	],

	// Controls the depth used when scanning workspace folders for Git repositories when `git.autoRepositoryDetection` is set to `true` or `subFolders`. Can be set to `-1` for no limit.
	"git.repositoryScanMaxDepth": 1,

	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,

	// List of paths to search for git repositories in.
	"git.scanRepositories": [],

	// Controls whether an action button is shown in the Source Control view.
	"git.showActionButton": {
		"commit": true,
		"publish": true,
		"sync": true
	},

	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",

	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,

	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,

	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,

	// Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,

	// Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting.
	"git.terminalGitEditor": false,

	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",

	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,

	// Controls whether to show uncommitted changes in the Timeline view.
	"git.timeline.showUncommitted": false,

	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",

	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,

	// Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.
	"git.useEditorAsCommitInput": true,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// Controls whether GIT_ASKPASS should be overwritten to use the integrated version.
	"git.useIntegratedAskPass": true,

	// Enable verbose output when `git.useEditorAsCommitInput` is enabled.
	"git.verboseCommit": false,

	// Controls whether to enable automatic GitHub authentication for git commands within VS Code.
	"github.gitAuthentication": true,

	// Controls which protocol is used to clone a GitHub repository
	"github.gitProtocol": "https",

	// GitHub Enterprise Server URI
	"github-enterprise.uri": "",

	// Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
	"grunt.autoDetect": "off",

	// Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
	"gulp.autoDetect": "off",

	// Enable/disable pasting of images into Markdown cells in ipynb notebook files. Pasted images are inserted as attachments to the cell.
	"ipynb.pasteImagesAsAttachments.enabled": true,

	// Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
	"jake.autoDetect": "off",

	// Enable/disable rendering math in the built-in Markdown preview.
	"markdown.math.enabled": true,

	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Create a CodeLens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,

	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,

	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",

	// Enable running npm scripts contained in a folder from the Explorer context menu.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
	"npm.enableScriptExplorer": false,

	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",

	// Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,

	// The package manager used to run scripts.
	//  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
	//  - npm: Use npm as the package manager for running scripts.
	//  - yarn: Use yarn as the package manager for running scripts.
	//  - pnpm: Use pnpm as the package manager for running scripts.
	"npm.packageManager": "auto",

	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,

	// The default click action used in the NPM Scripts Explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",

	// An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
	"npm.scriptExplorerExclude": [],

	// Display hover with 'Run' and 'Debug' commands for scripts.
	"npm.scriptHover": true,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting CodeLens references.
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// 単純なブラウザーにフォーカスが置かれたときに表示されるフローティング インジケーターを有効または無効にします。
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Always show the ESlint status bar item.
	"eslint.alwaysShowStatus": false,

	// The setting is deprecated. Use editor.codeActionsOnSave instead with a source.fixAll.eslint member.
	// Turns auto fix on save on or off.
	"eslint.autoFixOnSave": false,

	// Show disable lint rule in the quick fix menu.
	"eslint.codeAction.disableRuleComment": {
		"enable": true,
		"location": "separateLine"
	},

	// Show open lint rule documentation web page in the quick fix menu.
	"eslint.codeAction.showDocumentation": {
		"enable": true
	},

	// Specifies the code action mode. Possible values are 'all' and 'problems'.
	//  - all: Fixes all possible problems in the file. This option might take some time.
	//  - problems: Only fixes reported problems that have non overlapping textual edits. This options runs a lot faster.
	"eslint.codeActionsOnSave.mode": "all",

	// The rules that should be executed when computing the code actions on save or formatting a file. Defaults to the rules configured via the ESLint configuration
	"eslint.codeActionsOnSave.rules": null,

	// Enables ESLint debug mode (same as `--debug` on the command line)
	"eslint.debug": false,

	// Controls whether eslint is enabled or not.
	"eslint.enable": true,

	// Additional exec argv argument passed to the runtime. This can for example be used to control the maximum heap space using --max_old_space_size
	"eslint.execArgv": null,

	// Enables ESLint as a formatter.
	"eslint.format.enable": false,

	// Controls whether a task for linting the whole workspace will be available.
	"eslint.lintTask.enable": false,

	// Command line options applied when running the task for linting the whole workspace (see https://eslint.org/docs/user-guide/command-line-interface).
	"eslint.lintTask.options": ".",

	// Whether ESlint should migrate auto fix on save settings.
	"eslint.migration.2_x": "on",

	// The value of `NODE_ENV` to use when running eslint tasks.
	"eslint.nodeEnv": null,

	// A path added to `NODE_PATH` when resolving the eslint module.
	"eslint.nodePath": null,

	// A special rules customization section for text cells in notebook documents.
	"eslint.notebooks.rules.customizations": [],

	// Whether ESLint should issue a warning on ignored files.
	"eslint.onIgnoredFiles": "off",

	// The eslint options object to provide args normally passed to eslint when executed from a command line (see https://eslint.org/docs/developer-guide/nodejs-api#eslint-class).
	"eslint.options": {},

	// The package manager you use to install node modules.
	"eslint.packageManager": "npm",

	// An array of language ids for which the extension should probe if support is installed.
	"eslint.probe": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"html",
		"vue",
		"markdown"
	],

	// This option is deprecated. Use eslint.lintTask.enable instead.
	// Controls whether a task for linting the whole workspace will be available.
	"eslint.provideLintTask": false,

	// Turns on quiet mode, which ignores warnings.
	"eslint.quiet": false,

	// Override the severity of one or more rules reported by this extension, regardless of the project's ESLint config. Use globs to apply default severities for multiple rules.
	"eslint.rules.customizations": [],

	// Run the linter on save (onSave) or on type (onType)
	"eslint.run": "onType",

	// The location of the node binary to run ESLint under.
	"eslint.runtime": null,

	// Traces the communication between VSCode and the eslint linter service.
	"eslint.trace.server": "off",

	// Since version 7 ESLint offers a new API call ESLint. Use it even if the old CLIEngine is available. From version 8 on forward on ESLint class is available.
	"eslint.useESLintClass": false,

	// An array of language ids which should be validated by ESLint. If not installed ESLint will show an error.
	"eslint.validate": [],

	// Specifies how the working directories ESLint is using are computed. ESLint resolves configuration files (e.g. `eslintrc`, `.eslintignore`) relative to a working directory so it is important to configure this correctly.
	"eslint.workingDirectories": [],

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",

	// If true, puts the `>` of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.bracketSameLine": false,

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether prettier is enabled or not.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,

	// This option has been deprecated in v2.4.0, use `bracketSameLine` instead.
	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line (does not apply to self closing elements).
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the prettier module
	"prettier.prettierPath": "",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, enforces single attribute per line in HTML, Vue and JSX.
	"prettier.singleAttributePerLine": false,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files.
	"prettier.vueIndentScriptAndStyle": false,

	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
	"auto-rename-tag.activationOnLanguage": [
		"*"
	],

	// 設定されている場合、WSL ログの出力にデバッグ情報が表示されます。
	"remote.WSL.debug": false,

	// 設定されている場合、ポーリングは WSL1 内のファイル監視に使用されます。ポーリングは CPU を集中的に使用できますが、監視中にフォルダー名を変更できないという WSL1 の問題を修正します。このオプションを有効にするには再起動が必要です。
	"remote.WSL.fileWatcher.polling": false,

	// `remote.WSL.fileWatcher.polling` が設定されている場合、WSL1 ディストリビューション内で使用されるファイル ウォッチャーのポーリング間隔 (ミリ秒単位)。
	// このオプションを有効にするには再起動が必要です。
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// 代わりに `remote.WSL2.connectionMethod` を使用します。
	// 設定されている場合、WSL2 で実行されている VS Code サーバーへの接続で localhost (::1) が使用されます。設定されていない場合、接続はアクセス可能な場合は WSL2 VM の IP アドレスを直接使用し、アクセスできない場合は localhost を使用します。
	"remote.WSL.server.connectThroughLocalhost": false,

	// 設定されている場合、WSL ウィンドウは、開かれたシェルから環境を取得します。
	"remote.WSL.useShellEnvironment": true,

	// WSL1 ディストリビューションで実行されているVS Code サーバーに WSL 拡張機能を接続する方法を指定します。このオプションを有効にするには再起動が必要です。
	//  - localhost: Windowsと WSL1 の間で共有されている 127.0.0.1 を介して、WSL のサーバーに接続します。
	//  - wslExeProxy: 'wsl.exe' を使用して WSL に接続を転送するローカル プロキシ サーバーを介して WSL のサーバーに接続します。
	"remote.WSL1.connectionMethod": "localhost",

	// WSL2 ディストリビューションで実行されているVS Code サーバーに WSL 拡張機能を接続する方法を指定します。このオプションを有効にするには再起動が必要です。
	//  - localhost: Windowsによって WSL2 VM に転送される localhost (::1) を使用して、WSL のサーバーに接続します。
	//  - wsl2VMAddress: WSL2 VM の IP アドレスを使用して WSL のサーバーに接続します。
	//  - wslExeProxy: 'wsl.exe' を使用して WSL に接続を転送するローカル プロキシ サーバーを介して WSL のサーバーに接続します。
	"remote.WSL2.connectionMethod": "wslExeProxy",

	// Custom empty elements in addition to the default HTML empty elements
	"highlight-matching-tag.customEmptyElements": null,

	// Enables the highlighting and status bar
	"highlight-matching-tag.enabled": true,

	// Whether to highlight matching tag from the tag attributes
	"highlight-matching-tag.highlightFromAttributes": true,

	// Whether to highlight matching tag from inside the tag content
	"highlight-matching-tag.highlightFromContent": false,

	// Whether to highlight matching tag from the tag name
	"highlight-matching-tag.highlightFromName": true,

	// Should self-closing tags be highlighted
	"highlight-matching-tag.highlightSelfClosing": false,

	// Don't use default HTML empty elements
	"highlight-matching-tag.noDefaultEmptyElements": false,

	// Enables showing tag's path in status bar
	"highlight-matching-tag.showPath": true,

	// Enables showing highlighted tag pair in ruler section
	"highlight-matching-tag.showRuler": true,

	// Decorations for opening and closing tags
	"highlight-matching-tag.styles": null,

}